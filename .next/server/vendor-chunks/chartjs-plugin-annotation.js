"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/chartjs-plugin-annotation";
exports.ids = ["vendor-chunks/chartjs-plugin-annotation"];
exports.modules = {

/***/ "(ssr)/./node_modules/chartjs-plugin-annotation/dist/chartjs-plugin-annotation.esm.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/chartjs-plugin-annotation/dist/chartjs-plugin-annotation.esm.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ annotation)\n/* harmony export */ });\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! chart.js */ \"(ssr)/./node_modules/chart.js/dist/chart.js\");\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! chart.js */ \"(ssr)/./node_modules/chart.js/dist/chunks/helpers.dataset.js\");\n/* harmony import */ var chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chart.js/helpers */ \"(ssr)/./node_modules/chart.js/helpers/helpers.js\");\n/*!\n* chartjs-plugin-annotation v3.1.0\n* https://www.chartjs.org/chartjs-plugin-annotation/index\n * (c) 2024 chartjs-plugin-annotation Contributors\n * Released under the MIT License\n */ \n\n/**\n * @typedef { import(\"chart.js\").ChartEvent } ChartEvent\n * @typedef { import('../../types/element').AnnotationElement } AnnotationElement\n */ const interaction = {\n    modes: {\n        /**\n     * Point mode returns all elements that hit test based on the event position\n     * @param {AnnotationElement[]} visibleElements - annotation elements which are visible\n     * @param {ChartEvent} event - the event we are find things at\n     * @return {AnnotationElement[]} - elements that are found\n     */ point (visibleElements, event) {\n            return filterElements(visibleElements, event, {\n                intersect: true\n            });\n        },\n        /**\n     * Nearest mode returns the element closest to the event position\n     * @param {AnnotationElement[]} visibleElements - annotation elements which are visible\n     * @param {ChartEvent} event - the event we are find things at\n     * @param {Object} options - interaction options to use\n     * @return {AnnotationElement[]} - elements that are found (only 1 element)\n     */ nearest (visibleElements, event, options) {\n            return getNearestItem(visibleElements, event, options);\n        },\n        /**\n     * x mode returns the elements that hit-test at the current x coordinate\n     * @param {AnnotationElement[]} visibleElements - annotation elements which are visible\n     * @param {ChartEvent} event - the event we are find things at\n     * @param {Object} options - interaction options to use\n     * @return {AnnotationElement[]} - elements that are found\n     */ x (visibleElements, event, options) {\n            return filterElements(visibleElements, event, {\n                intersect: options.intersect,\n                axis: \"x\"\n            });\n        },\n        /**\n     * y mode returns the elements that hit-test at the current y coordinate\n     * @param {AnnotationElement[]} visibleElements - annotation elements which are visible\n     * @param {ChartEvent} event - the event we are find things at\n     * @param {Object} options - interaction options to use\n     * @return {AnnotationElement[]} - elements that are found\n     */ y (visibleElements, event, options) {\n            return filterElements(visibleElements, event, {\n                intersect: options.intersect,\n                axis: \"y\"\n            });\n        }\n    }\n};\n/**\n * Returns all elements that hit test based on the event position\n * @param {AnnotationElement[]} visibleElements - annotation elements which are visible\n * @param {ChartEvent} event - the event we are find things at\n * @param {Object} options - interaction options to use\n * @return {AnnotationElement[]} - elements that are found\n */ function getElements(visibleElements, event, options) {\n    const mode = interaction.modes[options.mode] || interaction.modes.nearest;\n    return mode(visibleElements, event, options);\n}\nfunction inRangeByAxis(element, event, axis) {\n    if (axis !== \"x\" && axis !== \"y\") {\n        return element.inRange(event.x, event.y, \"x\", true) || element.inRange(event.x, event.y, \"y\", true);\n    }\n    return element.inRange(event.x, event.y, axis, true);\n}\nfunction getPointByAxis(event, center, axis) {\n    if (axis === \"x\") {\n        return {\n            x: event.x,\n            y: center.y\n        };\n    } else if (axis === \"y\") {\n        return {\n            x: center.x,\n            y: event.y\n        };\n    }\n    return center;\n}\nfunction filterElements(visibleElements, event, options) {\n    return visibleElements.filter((element)=>options.intersect ? element.inRange(event.x, event.y) : inRangeByAxis(element, event, options.axis));\n}\nfunction getNearestItem(visibleElements, event, options) {\n    let minDistance = Number.POSITIVE_INFINITY;\n    return filterElements(visibleElements, event, options).reduce((nearestItems, element)=>{\n        const center = element.getCenterPoint();\n        const evenPoint = getPointByAxis(event, center, options.axis);\n        const distance = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.distanceBetweenPoints)(event, evenPoint);\n        if (distance < minDistance) {\n            nearestItems = [\n                element\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            // Can have multiple items at the same distance in which case we sort by size\n            nearestItems.push(element);\n        }\n        return nearestItems;\n    }, []).sort((a, b)=>a._index - b._index).slice(0, 1); // return only the top item;\n}\n/**\n * @typedef {import('chart.js').Point} Point\n */ /**\n * Rotate a `point` relative to `center` point by `angle`\n * @param {Point} point - the point to rotate\n * @param {Point} center - center point for rotation\n * @param {number} angle - angle for rotation, in radians\n * @returns {Point} rotated point\n */ function rotated(point, center, angle) {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    const cx = center.x;\n    const cy = center.y;\n    return {\n        x: cx + cos * (point.x - cx) - sin * (point.y - cy),\n        y: cy + sin * (point.x - cx) + cos * (point.y - cy)\n    };\n}\nconst isOlderPart = (act, req)=>req > act || act.length > req.length && act.slice(0, req.length) === req;\n/**\n * @typedef { import('chart.js').Point } Point\n * @typedef { import('chart.js').InteractionAxis } InteractionAxis\n * @typedef { import('../../types/element').AnnotationElement } AnnotationElement\n */ const EPSILON = 0.001;\nconst clamp = (x, from, to)=>Math.min(to, Math.max(from, x));\n/**\n * @param {{value: number, start: number, end: number}} limit\n * @param {number} hitSize\n * @returns {boolean}\n */ const inLimit = (limit, hitSize)=>limit.value >= limit.start - hitSize && limit.value <= limit.end + hitSize;\n/**\n * @param {Object} obj\n * @param {number} from\n * @param {number} to\n * @returns {Object}\n */ function clampAll(obj, from, to) {\n    for (const key of Object.keys(obj)){\n        obj[key] = clamp(obj[key], from, to);\n    }\n    return obj;\n}\n/**\n * @param {Point} point\n * @param {Point} center\n * @param {number} radius\n * @param {number} hitSize\n * @returns {boolean}\n */ function inPointRange(point, center, radius, hitSize) {\n    if (!point || !center || radius <= 0) {\n        return false;\n    }\n    return Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2) <= Math.pow(radius + hitSize, 2);\n}\n/**\n * @param {Point} point\n * @param {{x: number, y: number, x2: number, y2: number}} rect\n * @param {InteractionAxis} axis\n * @param {{borderWidth: number, hitTolerance: number}} hitsize\n * @returns {boolean}\n */ function inBoxRange(point, { x, y, x2, y2 }, axis, { borderWidth, hitTolerance }) {\n    const hitSize = (borderWidth + hitTolerance) / 2;\n    const inRangeX = point.x >= x - hitSize - EPSILON && point.x <= x2 + hitSize + EPSILON;\n    const inRangeY = point.y >= y - hitSize - EPSILON && point.y <= y2 + hitSize + EPSILON;\n    if (axis === \"x\") {\n        return inRangeX;\n    } else if (axis === \"y\") {\n        return inRangeY;\n    }\n    return inRangeX && inRangeY;\n}\n/**\n * @param {Point} point\n * @param {rect: {x: number, y: number, x2: number, y2: number}, center: {x: number, y: number}} element\n * @param {InteractionAxis} axis\n * @param {{rotation: number, borderWidth: number, hitTolerance: number}}\n * @returns {boolean}\n */ function inLabelRange(point, { rect, center }, axis, { rotation, borderWidth, hitTolerance }) {\n    const rotPoint = rotated(point, center, (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toRadians)(-rotation));\n    return inBoxRange(rotPoint, rect, axis, {\n        borderWidth,\n        hitTolerance\n    });\n}\n/**\n * @param {AnnotationElement} element\n * @param {boolean} useFinalPosition\n * @returns {Point}\n */ function getElementCenterPoint(element, useFinalPosition) {\n    const { centerX, centerY } = element.getProps([\n        \"centerX\",\n        \"centerY\"\n    ], useFinalPosition);\n    return {\n        x: centerX,\n        y: centerY\n    };\n}\n/**\n * @param {string} pkg\n * @param {string} min\n * @param {string} ver\n * @param {boolean} [strict=true]\n * @returns {boolean}\n */ function requireVersion(pkg, min, ver, strict = true) {\n    const parts = ver.split(\".\");\n    let i = 0;\n    for (const req of min.split(\".\")){\n        const act = parts[i++];\n        if (parseInt(req, 10) < parseInt(act, 10)) {\n            break;\n        }\n        if (isOlderPart(act, req)) {\n            if (strict) {\n                throw new Error(`${pkg} v${ver} is not supported. v${min} or newer is required.`);\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nconst isPercentString = (s)=>typeof s === \"string\" && s.endsWith(\"%\");\nconst toPercent = (s)=>parseFloat(s) / 100;\nconst toPositivePercent = (s)=>clamp(toPercent(s), 0, 1);\nconst boxAppering = (x, y)=>({\n        x,\n        y,\n        x2: x,\n        y2: y,\n        width: 0,\n        height: 0\n    });\nconst defaultInitAnimation = {\n    box: (properties)=>boxAppering(properties.centerX, properties.centerY),\n    doughnutLabel: (properties)=>boxAppering(properties.centerX, properties.centerY),\n    ellipse: (properties)=>({\n            centerX: properties.centerX,\n            centerY: properties.centerX,\n            radius: 0,\n            width: 0,\n            height: 0\n        }),\n    label: (properties)=>boxAppering(properties.centerX, properties.centerY),\n    line: (properties)=>boxAppering(properties.x, properties.y),\n    point: (properties)=>({\n            centerX: properties.centerX,\n            centerY: properties.centerY,\n            radius: 0,\n            width: 0,\n            height: 0\n        }),\n    polygon: (properties)=>boxAppering(properties.centerX, properties.centerY)\n};\n/**\n * @typedef { import('chart.js').FontSpec } FontSpec\n * @typedef { import('chart.js').Point } Point\n * @typedef { import('chart.js').Padding } Padding\n * @typedef { import('../../types/element').AnnotationBoxModel } AnnotationBoxModel\n * @typedef { import('../../types/element').AnnotationElement } AnnotationElement\n * @typedef { import('../../types/options').AnnotationPointCoordinates } AnnotationPointCoordinates\n * @typedef { import('../../types/label').CoreLabelOptions } CoreLabelOptions\n * @typedef { import('../../types/label').LabelPositionObject } LabelPositionObject\n */ /**\n * @param {number} size\n * @param {number|string} position\n * @returns {number}\n */ function getRelativePosition(size, position) {\n    if (position === \"start\") {\n        return 0;\n    }\n    if (position === \"end\") {\n        return size;\n    }\n    if (isPercentString(position)) {\n        return toPositivePercent(position) * size;\n    }\n    return size / 2;\n}\n/**\n * @param {number} size\n * @param {number|string} value\n * @param {boolean} [positivePercent=true]\n * @returns {number}\n */ function getSize(size, value, positivePercent = true) {\n    if (typeof value === \"number\") {\n        return value;\n    } else if (isPercentString(value)) {\n        return (positivePercent ? toPositivePercent(value) : toPercent(value)) * size;\n    }\n    return size;\n}\n/**\n * @param {{x: number, width: number}} size\n * @param {CoreLabelOptions} options\n * @returns {number}\n */ function calculateTextAlignment(size, options) {\n    const { x, width } = size;\n    const textAlign = options.textAlign;\n    if (textAlign === \"center\") {\n        return x + width / 2;\n    } else if (textAlign === \"end\" || textAlign === \"right\") {\n        return x + width;\n    }\n    return x;\n}\n/**\n * @param {Point} point\n * @param {{height: number, width: number}} labelSize\n * @param {{borderWidth: number, position: {LabelPositionObject|string}, xAdjust: number, yAdjust: number}} options\n * @param {Padding|undefined} padding\n * @returns {{x: number, y: number, x2: number, y2: number, height: number, width: number, centerX: number, centerY: number}}\n */ function measureLabelRectangle(point, labelSize, { borderWidth, position, xAdjust, yAdjust }, padding) {\n    const hasPadding = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isObject)(padding);\n    const width = labelSize.width + (hasPadding ? padding.width : 0) + borderWidth;\n    const height = labelSize.height + (hasPadding ? padding.height : 0) + borderWidth;\n    const positionObj = toPosition(position);\n    const x = calculateLabelPosition$1(point.x, width, xAdjust, positionObj.x);\n    const y = calculateLabelPosition$1(point.y, height, yAdjust, positionObj.y);\n    return {\n        x,\n        y,\n        x2: x + width,\n        y2: y + height,\n        width,\n        height,\n        centerX: x + width / 2,\n        centerY: y + height / 2\n    };\n}\n/**\n * @param {LabelPositionObject|string} value\n * @param {string|number} defaultValue\n * @returns {LabelPositionObject}\n */ function toPosition(value, defaultValue = \"center\") {\n    if ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) {\n        return {\n            x: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.valueOrDefault)(value.x, defaultValue),\n            y: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.valueOrDefault)(value.y, defaultValue)\n        };\n    }\n    value = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.valueOrDefault)(value, defaultValue);\n    return {\n        x: value,\n        y: value\n    };\n}\n/**\n * @param {CoreLabelOptions} options\n * @param {number} fitRatio\n * @returns {boolean}\n */ const shouldFit = (options, fitRatio)=>options && options.autoFit && fitRatio < 1;\n/**\n * @param {CoreLabelOptions} options\n * @param {number} fitRatio\n * @returns {FontSpec[]}\n */ function toFonts(options, fitRatio) {\n    const optFont = options.font;\n    const fonts = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isArray)(optFont) ? optFont : [\n        optFont\n    ];\n    if (shouldFit(options, fitRatio)) {\n        return fonts.map(function(f) {\n            const font = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toFont)(f);\n            font.size = Math.floor(f.size * fitRatio);\n            font.lineHeight = f.lineHeight;\n            return (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toFont)(font);\n        });\n    }\n    return fonts.map((f)=>(0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toFont)(f));\n}\n/**\n * @param {AnnotationPointCoordinates} options\n * @returns {boolean}\n */ function isBoundToPoint(options) {\n    return options && ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.defined)(options.xValue) || (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.defined)(options.yValue));\n}\nfunction calculateLabelPosition$1(start, size, adjust = 0, position) {\n    return start - getRelativePosition(size, position) + adjust;\n}\n/**\n * @param {Chart} chart\n * @param {AnnotationBoxModel} properties\n * @param {CoreAnnotationOptions} options\n * @returns {AnnotationElement}\n */ function initAnimationProperties(chart, properties, options) {\n    const initAnim = options.init;\n    if (!initAnim) {\n        return;\n    } else if (initAnim === true) {\n        return applyDefault(properties, options);\n    }\n    return execCallback(chart, properties, options);\n}\n/**\n * @param {Object} options\n * @param {Array} hooks\n * @param {Object} hooksContainer\n * @returns {boolean}\n */ function loadHooks(options, hooks, hooksContainer) {\n    let activated = false;\n    hooks.forEach((hook)=>{\n        if ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isFunction)(options[hook])) {\n            activated = true;\n            hooksContainer[hook] = options[hook];\n        } else if ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.defined)(hooksContainer[hook])) {\n            delete hooksContainer[hook];\n        }\n    });\n    return activated;\n}\nfunction applyDefault(properties, options) {\n    const type = options.type || \"line\";\n    return defaultInitAnimation[type](properties);\n}\nfunction execCallback(chart, properties, options) {\n    const result = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.callback)(options.init, [\n        {\n            chart,\n            properties,\n            options\n        }\n    ]);\n    if (result === true) {\n        return applyDefault(properties, options);\n    } else if ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isObject)(result)) {\n        return result;\n    }\n}\nconst widthCache = new Map();\nconst notRadius = (radius)=>isNaN(radius) || radius <= 0;\nconst fontsKey = (fonts)=>fonts.reduce(function(prev, item) {\n        prev += item.string;\n        return prev;\n    }, \"\");\n/**\n * @typedef { import('chart.js').Point } Point\n * @typedef { import('../../types/label').CoreLabelOptions } CoreLabelOptions\n * @typedef { import('../../types/options').PointAnnotationOptions } PointAnnotationOptions\n */ /**\n * Determine if content is an image or a canvas.\n * @param {*} content\n * @returns boolean|undefined\n * @todo move this function to chart.js helpers\n */ function isImageOrCanvas(content) {\n    if (content && typeof content === \"object\") {\n        const type = content.toString();\n        return type === \"[object HTMLImageElement]\" || type === \"[object HTMLCanvasElement]\";\n    }\n}\n/**\n * Set the translation on the canvas if the rotation must be applied.\n * @param {CanvasRenderingContext2D} ctx - chart canvas context\n * @param {Point} point - the point of translation\n * @param {number} rotation - rotation (in degrees) to apply\n */ function translate(ctx, { x, y }, rotation) {\n    if (rotation) {\n        ctx.translate(x, y);\n        ctx.rotate((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toRadians)(rotation));\n        ctx.translate(-x, -y);\n    }\n}\n/**\n * @param {CanvasRenderingContext2D} ctx\n * @param {Object} options\n * @returns {boolean|undefined}\n */ function setBorderStyle(ctx, options) {\n    if (options && options.borderWidth) {\n        ctx.lineCap = options.borderCapStyle || \"butt\";\n        ctx.setLineDash(options.borderDash);\n        ctx.lineDashOffset = options.borderDashOffset;\n        ctx.lineJoin = options.borderJoinStyle || \"miter\";\n        ctx.lineWidth = options.borderWidth;\n        ctx.strokeStyle = options.borderColor;\n        return true;\n    }\n}\n/**\n * @param {CanvasRenderingContext2D} ctx\n * @param {Object} options\n */ function setShadowStyle(ctx, options) {\n    ctx.shadowColor = options.backgroundShadowColor;\n    ctx.shadowBlur = options.shadowBlur;\n    ctx.shadowOffsetX = options.shadowOffsetX;\n    ctx.shadowOffsetY = options.shadowOffsetY;\n}\n/**\n * @param {CanvasRenderingContext2D} ctx\n * @param {CoreLabelOptions} options\n * @returns {{width: number, height: number}}\n */ function measureLabelSize(ctx, options) {\n    const content = options.content;\n    if (isImageOrCanvas(content)) {\n        const size = {\n            width: getSize(content.width, options.width),\n            height: getSize(content.height, options.height)\n        };\n        return size;\n    }\n    const fonts = toFonts(options);\n    const strokeWidth = options.textStrokeWidth;\n    const lines = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isArray)(content) ? content : [\n        content\n    ];\n    const mapKey = lines.join() + fontsKey(fonts) + strokeWidth + (ctx._measureText ? \"-spriting\" : \"\");\n    if (!widthCache.has(mapKey)) {\n        widthCache.set(mapKey, calculateLabelSize(ctx, lines, fonts, strokeWidth));\n    }\n    return widthCache.get(mapKey);\n}\n/**\n * @param {CanvasRenderingContext2D} ctx\n * @param {{x: number, y: number, width: number, height: number}} rect\n * @param {Object} options\n */ function drawBox(ctx, rect, options) {\n    const { x, y, width, height } = rect;\n    ctx.save();\n    setShadowStyle(ctx, options);\n    const stroke = setBorderStyle(ctx, options);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.beginPath();\n    (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.addRoundedRectPath)(ctx, {\n        x,\n        y,\n        w: width,\n        h: height,\n        radius: clampAll((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toTRBLCorners)(options.borderRadius), 0, Math.min(width, height) / 2)\n    });\n    ctx.closePath();\n    ctx.fill();\n    if (stroke) {\n        ctx.shadowColor = options.borderShadowColor;\n        ctx.stroke();\n    }\n    ctx.restore();\n}\n/**\n * @param {CanvasRenderingContext2D} ctx\n * @param {{x: number, y: number, width: number, height: number}} rect\n * @param {CoreLabelOptions} options\n * @param {number} fitRatio\n */ function drawLabel(ctx, rect, options, fitRatio) {\n    const content = options.content;\n    if (isImageOrCanvas(content)) {\n        ctx.save();\n        ctx.globalAlpha = getOpacity(options.opacity, content.style.opacity);\n        ctx.drawImage(content, rect.x, rect.y, rect.width, rect.height);\n        ctx.restore();\n        return;\n    }\n    const labels = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isArray)(content) ? content : [\n        content\n    ];\n    const fonts = toFonts(options, fitRatio);\n    const optColor = options.color;\n    const colors = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isArray)(optColor) ? optColor : [\n        optColor\n    ];\n    const x = calculateTextAlignment(rect, options);\n    const y = rect.y + options.textStrokeWidth / 2;\n    ctx.save();\n    ctx.textBaseline = \"middle\";\n    ctx.textAlign = options.textAlign;\n    if (setTextStrokeStyle(ctx, options)) {\n        applyLabelDecoration(ctx, {\n            x,\n            y\n        }, labels, fonts);\n    }\n    applyLabelContent(ctx, {\n        x,\n        y\n    }, labels, {\n        fonts,\n        colors\n    });\n    ctx.restore();\n}\nfunction setTextStrokeStyle(ctx, options) {\n    if (options.textStrokeWidth > 0) {\n        // https://stackoverflow.com/questions/13627111/drawing-text-with-an-outer-stroke-with-html5s-canvas\n        ctx.lineJoin = \"round\";\n        ctx.miterLimit = 2;\n        ctx.lineWidth = options.textStrokeWidth;\n        ctx.strokeStyle = options.textStrokeColor;\n        return true;\n    }\n}\n/**\n * @param {CanvasRenderingContext2D} ctx\n * @param {{radius: number, options: PointAnnotationOptions}} element\n * @param {number} x\n * @param {number} y\n */ function drawPoint(ctx, element, x, y) {\n    const { radius, options } = element;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    let rad = (rotation || 0) * chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.RAD_PER_DEG;\n    if (isImageOrCanvas(style)) {\n        ctx.save();\n        ctx.translate(x, y);\n        ctx.rotate(rad);\n        ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n        ctx.restore();\n        return;\n    }\n    if (notRadius(radius)) {\n        return;\n    }\n    drawPointStyle(ctx, {\n        x,\n        y,\n        radius,\n        rotation,\n        style,\n        rad\n    });\n}\nfunction drawPointStyle(ctx, { x, y, radius, rotation, style, rad }) {\n    let xOffset, yOffset, size, cornerRadius;\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            ctx.arc(x, y, radius, 0, chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.TAU);\n            ctx.closePath();\n            break;\n        case \"triangle\":\n            ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n            rad += chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n            rad += chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case \"rectRounded\":\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.QUARTER_PI) * size;\n            yOffset = Math.sin(rad + chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.QUARTER_PI) * size;\n            ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.PI, rad - chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.HALF_PI);\n            ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.HALF_PI, rad);\n            ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.HALF_PI);\n            ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.HALF_PI, rad + chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.PI);\n            ctx.closePath();\n            break;\n        case \"rect\":\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                ctx.rect(x - size, y - size, 2 * size, 2 * size);\n                break;\n            }\n            rad += chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.QUARTER_PI;\n        /* falls through */ case \"rectRot\":\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + yOffset, y - xOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            ctx.lineTo(x - yOffset, y + xOffset);\n            ctx.closePath();\n            break;\n        case \"crossRot\":\n            rad += chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.QUARTER_PI;\n        /* falls through */ case \"cross\":\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            ctx.moveTo(x + yOffset, y - xOffset);\n            ctx.lineTo(x - yOffset, y + xOffset);\n            break;\n        case \"star\":\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            ctx.moveTo(x + yOffset, y - xOffset);\n            ctx.lineTo(x - yOffset, y + xOffset);\n            rad += chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.QUARTER_PI;\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            ctx.moveTo(x + yOffset, y - xOffset);\n            ctx.lineTo(x - yOffset, y + xOffset);\n            break;\n        case \"line\":\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case \"dash\":\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n            break;\n    }\n    ctx.fill();\n}\nfunction calculateLabelSize(ctx, lines, fonts, strokeWidth) {\n    ctx.save();\n    const count = lines.length;\n    let width = 0;\n    let height = strokeWidth;\n    for(let i = 0; i < count; i++){\n        const font = fonts[Math.min(i, fonts.length - 1)];\n        ctx.font = font.string;\n        const text = lines[i];\n        width = Math.max(width, ctx.measureText(text).width + strokeWidth);\n        height += font.lineHeight;\n    }\n    ctx.restore();\n    return {\n        width,\n        height\n    };\n}\nfunction applyLabelDecoration(ctx, { x, y }, labels, fonts) {\n    ctx.beginPath();\n    let lhs = 0;\n    labels.forEach(function(l, i) {\n        const f = fonts[Math.min(i, fonts.length - 1)];\n        const lh = f.lineHeight;\n        ctx.font = f.string;\n        ctx.strokeText(l, x, y + lh / 2 + lhs);\n        lhs += lh;\n    });\n    ctx.stroke();\n}\nfunction applyLabelContent(ctx, { x, y }, labels, { fonts, colors }) {\n    let lhs = 0;\n    labels.forEach(function(l, i) {\n        const c = colors[Math.min(i, colors.length - 1)];\n        const f = fonts[Math.min(i, fonts.length - 1)];\n        const lh = f.lineHeight;\n        ctx.beginPath();\n        ctx.font = f.string;\n        ctx.fillStyle = c;\n        ctx.fillText(l, x, y + lh / 2 + lhs);\n        lhs += lh;\n        ctx.fill();\n    });\n}\nfunction getOpacity(value, elementValue) {\n    const opacity = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isNumber)(value) ? value : elementValue;\n    return (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isNumber)(opacity) ? clamp(opacity, 0, 1) : 1;\n}\nconst positions = [\n    \"left\",\n    \"bottom\",\n    \"top\",\n    \"right\"\n];\n/**\n * @typedef { import('../../types/element').AnnotationElement } AnnotationElement\n */ /**\n * Drawa the callout component for labels.\n * @param {CanvasRenderingContext2D} ctx - chart canvas context\n * @param {AnnotationElement} element - the label element\n */ function drawCallout(ctx, element) {\n    const { pointX, pointY, options } = element;\n    const callout = options.callout;\n    const calloutPosition = callout && callout.display && resolveCalloutPosition(element, callout);\n    if (!calloutPosition || isPointInRange(element, callout, calloutPosition)) {\n        return;\n    }\n    ctx.save();\n    ctx.beginPath();\n    const stroke = setBorderStyle(ctx, callout);\n    if (!stroke) {\n        return ctx.restore();\n    }\n    const { separatorStart, separatorEnd } = getCalloutSeparatorCoord(element, calloutPosition);\n    const { sideStart, sideEnd } = getCalloutSideCoord(element, calloutPosition, separatorStart);\n    if (callout.margin > 0 || options.borderWidth === 0) {\n        ctx.moveTo(separatorStart.x, separatorStart.y);\n        ctx.lineTo(separatorEnd.x, separatorEnd.y);\n    }\n    ctx.moveTo(sideStart.x, sideStart.y);\n    ctx.lineTo(sideEnd.x, sideEnd.y);\n    const rotatedPoint = rotated({\n        x: pointX,\n        y: pointY\n    }, element.getCenterPoint(), (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toRadians)(-element.rotation));\n    ctx.lineTo(rotatedPoint.x, rotatedPoint.y);\n    ctx.stroke();\n    ctx.restore();\n}\nfunction getCalloutSeparatorCoord(element, position) {\n    const { x, y, x2, y2 } = element;\n    const adjust = getCalloutSeparatorAdjust(element, position);\n    let separatorStart, separatorEnd;\n    if (position === \"left\" || position === \"right\") {\n        separatorStart = {\n            x: x + adjust,\n            y\n        };\n        separatorEnd = {\n            x: separatorStart.x,\n            y: y2\n        };\n    } else {\n        //  position 'top' or 'bottom'\n        separatorStart = {\n            x,\n            y: y + adjust\n        };\n        separatorEnd = {\n            x: x2,\n            y: separatorStart.y\n        };\n    }\n    return {\n        separatorStart,\n        separatorEnd\n    };\n}\nfunction getCalloutSeparatorAdjust(element, position) {\n    const { width, height, options } = element;\n    const adjust = options.callout.margin + options.borderWidth / 2;\n    if (position === \"right\") {\n        return width + adjust;\n    } else if (position === \"bottom\") {\n        return height + adjust;\n    }\n    return -adjust;\n}\nfunction getCalloutSideCoord(element, position, separatorStart) {\n    const { y, width, height, options } = element;\n    const start = options.callout.start;\n    const side = getCalloutSideAdjust(position, options.callout);\n    let sideStart, sideEnd;\n    if (position === \"left\" || position === \"right\") {\n        sideStart = {\n            x: separatorStart.x,\n            y: y + getSize(height, start)\n        };\n        sideEnd = {\n            x: sideStart.x + side,\n            y: sideStart.y\n        };\n    } else {\n        //  position 'top' or 'bottom'\n        sideStart = {\n            x: separatorStart.x + getSize(width, start),\n            y: separatorStart.y\n        };\n        sideEnd = {\n            x: sideStart.x,\n            y: sideStart.y + side\n        };\n    }\n    return {\n        sideStart,\n        sideEnd\n    };\n}\nfunction getCalloutSideAdjust(position, options) {\n    const side = options.side;\n    if (position === \"left\" || position === \"top\") {\n        return -side;\n    }\n    return side;\n}\nfunction resolveCalloutPosition(element, options) {\n    const position = options.position;\n    if (positions.includes(position)) {\n        return position;\n    }\n    return resolveCalloutAutoPosition(element, options);\n}\nfunction resolveCalloutAutoPosition(element, options) {\n    const { x, y, x2, y2, width, height, pointX, pointY, centerX, centerY, rotation } = element;\n    const center = {\n        x: centerX,\n        y: centerY\n    };\n    const start = options.start;\n    const xAdjust = getSize(width, start);\n    const yAdjust = getSize(height, start);\n    const xPoints = [\n        x,\n        x + xAdjust,\n        x + xAdjust,\n        x2\n    ];\n    const yPoints = [\n        y + yAdjust,\n        y2,\n        y,\n        y2\n    ];\n    const result = [];\n    for(let index = 0; index < 4; index++){\n        const rotatedPoint = rotated({\n            x: xPoints[index],\n            y: yPoints[index]\n        }, center, (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toRadians)(rotation));\n        result.push({\n            position: positions[index],\n            distance: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.distanceBetweenPoints)(rotatedPoint, {\n                x: pointX,\n                y: pointY\n            })\n        });\n    }\n    return result.sort((a, b)=>a.distance - b.distance)[0].position;\n}\nfunction isPointInRange(element, callout, position) {\n    const { pointX, pointY } = element;\n    const margin = callout.margin;\n    let x = pointX;\n    let y = pointY;\n    if (position === \"left\") {\n        x += margin;\n    } else if (position === \"right\") {\n        x -= margin;\n    } else if (position === \"top\") {\n        y += margin;\n    } else if (position === \"bottom\") {\n        y -= margin;\n    }\n    return element.inRange(x, y);\n}\nconst limitedLineScale = {\n    xScaleID: {\n        min: \"xMin\",\n        max: \"xMax\",\n        start: \"left\",\n        end: \"right\",\n        startProp: \"x\",\n        endProp: \"x2\"\n    },\n    yScaleID: {\n        min: \"yMin\",\n        max: \"yMax\",\n        start: \"bottom\",\n        end: \"top\",\n        startProp: \"y\",\n        endProp: \"y2\"\n    }\n};\n/**\n * @typedef { import(\"chart.js\").Chart } Chart\n * @typedef { import(\"chart.js\").Scale } Scale\n * @typedef { import(\"chart.js\").Point } Point\n * @typedef { import('../../types/element').AnnotationBoxModel } AnnotationBoxModel\n * @typedef { import('../../types/options').CoreAnnotationOptions } CoreAnnotationOptions\n * @typedef { import('../../types/options').LineAnnotationOptions } LineAnnotationOptions\n * @typedef { import('../../types/options').PointAnnotationOptions } PointAnnotationOptions\n * @typedef { import('../../types/options').PolygonAnnotationOptions } PolygonAnnotationOptions\n */ /**\n * @param {Scale} scale\n * @param {number|string} value\n * @param {number} fallback\n * @returns {number}\n */ function scaleValue(scale, value, fallback) {\n    value = typeof value === \"number\" ? value : scale.parse(value);\n    return (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isFinite)(value) ? scale.getPixelForValue(value) : fallback;\n}\n/**\n * Search the scale defined in chartjs by the axis related to the annotation options key.\n * @param {{ [key: string]: Scale }} scales\n * @param {CoreAnnotationOptions} options\n * @param {string} key\n * @returns {string}\n */ function retrieveScaleID(scales, options, key) {\n    const scaleID = options[key];\n    if (scaleID || key === \"scaleID\") {\n        return scaleID;\n    }\n    const axis = key.charAt(0);\n    const axes = Object.values(scales).filter((scale)=>scale.axis && scale.axis === axis);\n    if (axes.length) {\n        return axes[0].id;\n    }\n    return axis;\n}\n/**\n * @param {Scale} scale\n * @param {{min: number, max: number, start: number, end: number}} options\n * @returns {{start: number, end: number}|undefined}\n */ function getDimensionByScale(scale, options) {\n    if (scale) {\n        const reverse = scale.options.reverse;\n        const start = scaleValue(scale, options.min, reverse ? options.end : options.start);\n        const end = scaleValue(scale, options.max, reverse ? options.start : options.end);\n        return {\n            start,\n            end\n        };\n    }\n}\n/**\n * @param {Chart} chart\n * @param {CoreAnnotationOptions} options\n * @returns {Point}\n */ function getChartPoint(chart, options) {\n    const { chartArea, scales } = chart;\n    const xScale = scales[retrieveScaleID(scales, options, \"xScaleID\")];\n    const yScale = scales[retrieveScaleID(scales, options, \"yScaleID\")];\n    let x = chartArea.width / 2;\n    let y = chartArea.height / 2;\n    if (xScale) {\n        x = scaleValue(xScale, options.xValue, xScale.left + xScale.width / 2);\n    }\n    if (yScale) {\n        y = scaleValue(yScale, options.yValue, yScale.top + yScale.height / 2);\n    }\n    return {\n        x,\n        y\n    };\n}\n/**\n * @param {Chart} chart\n * @param {CoreAnnotationOptions} options\n * @returns {AnnotationBoxModel}\n */ function resolveBoxProperties(chart, options) {\n    const scales = chart.scales;\n    const xScale = scales[retrieveScaleID(scales, options, \"xScaleID\")];\n    const yScale = scales[retrieveScaleID(scales, options, \"yScaleID\")];\n    if (!xScale && !yScale) {\n        return {};\n    }\n    let { left: x, right: x2 } = xScale || chart.chartArea;\n    let { top: y, bottom: y2 } = yScale || chart.chartArea;\n    const xDim = getChartDimensionByScale(xScale, {\n        min: options.xMin,\n        max: options.xMax,\n        start: x,\n        end: x2\n    });\n    x = xDim.start;\n    x2 = xDim.end;\n    const yDim = getChartDimensionByScale(yScale, {\n        min: options.yMin,\n        max: options.yMax,\n        start: y2,\n        end: y\n    });\n    y = yDim.start;\n    y2 = yDim.end;\n    return {\n        x,\n        y,\n        x2,\n        y2,\n        width: x2 - x,\n        height: y2 - y,\n        centerX: x + (x2 - x) / 2,\n        centerY: y + (y2 - y) / 2\n    };\n}\n/**\n * @param {Chart} chart\n * @param {PointAnnotationOptions|PolygonAnnotationOptions} options\n * @returns {AnnotationBoxModel}\n */ function resolvePointProperties(chart, options) {\n    if (!isBoundToPoint(options)) {\n        const box = resolveBoxProperties(chart, options);\n        let radius = options.radius;\n        if (!radius || isNaN(radius)) {\n            radius = Math.min(box.width, box.height) / 2;\n            options.radius = radius;\n        }\n        const size = radius * 2;\n        const adjustCenterX = box.centerX + options.xAdjust;\n        const adjustCenterY = box.centerY + options.yAdjust;\n        return {\n            x: adjustCenterX - radius,\n            y: adjustCenterY - radius,\n            x2: adjustCenterX + radius,\n            y2: adjustCenterY + radius,\n            centerX: adjustCenterX,\n            centerY: adjustCenterY,\n            width: size,\n            height: size,\n            radius\n        };\n    }\n    return getChartCircle(chart, options);\n}\n/**\n * @param {Chart} chart\n * @param {LineAnnotationOptions} options\n * @returns {AnnotationBoxModel}\n */ function resolveLineProperties(chart, options) {\n    const { scales, chartArea } = chart;\n    const scale = scales[options.scaleID];\n    const area = {\n        x: chartArea.left,\n        y: chartArea.top,\n        x2: chartArea.right,\n        y2: chartArea.bottom\n    };\n    if (scale) {\n        resolveFullLineProperties(scale, area, options);\n    } else {\n        resolveLimitedLineProperties(scales, area, options);\n    }\n    return area;\n}\n/**\n * @param {Chart} chart\n * @param {CoreAnnotationOptions} options\n * @param {boolean} [centerBased=false]\n * @returns {AnnotationBoxModel}\n */ function resolveBoxAndLabelProperties(chart, options) {\n    const properties = resolveBoxProperties(chart, options);\n    properties.initProperties = initAnimationProperties(chart, properties, options);\n    properties.elements = [\n        {\n            type: \"label\",\n            optionScope: \"label\",\n            properties: resolveLabelElementProperties$1(chart, properties, options),\n            initProperties: properties.initProperties\n        }\n    ];\n    return properties;\n}\nfunction getChartCircle(chart, options) {\n    const point = getChartPoint(chart, options);\n    const size = options.radius * 2;\n    return {\n        x: point.x - options.radius + options.xAdjust,\n        y: point.y - options.radius + options.yAdjust,\n        x2: point.x + options.radius + options.xAdjust,\n        y2: point.y + options.radius + options.yAdjust,\n        centerX: point.x + options.xAdjust,\n        centerY: point.y + options.yAdjust,\n        radius: options.radius,\n        width: size,\n        height: size\n    };\n}\nfunction getChartDimensionByScale(scale, options) {\n    const result = getDimensionByScale(scale, options) || options;\n    return {\n        start: Math.min(result.start, result.end),\n        end: Math.max(result.start, result.end)\n    };\n}\nfunction resolveFullLineProperties(scale, area, options) {\n    const min = scaleValue(scale, options.value, NaN);\n    const max = scaleValue(scale, options.endValue, min);\n    if (scale.isHorizontal()) {\n        area.x = min;\n        area.x2 = max;\n    } else {\n        area.y = min;\n        area.y2 = max;\n    }\n}\nfunction resolveLimitedLineProperties(scales, area, options) {\n    for (const scaleId of Object.keys(limitedLineScale)){\n        const scale = scales[retrieveScaleID(scales, options, scaleId)];\n        if (scale) {\n            const { min, max, start, end, startProp, endProp } = limitedLineScale[scaleId];\n            const dim = getDimensionByScale(scale, {\n                min: options[min],\n                max: options[max],\n                start: scale[start],\n                end: scale[end]\n            });\n            area[startProp] = dim.start;\n            area[endProp] = dim.end;\n        }\n    }\n}\nfunction calculateX({ properties, options }, labelSize, position, padding) {\n    const { x: start, x2: end, width: size } = properties;\n    return calculatePosition({\n        start,\n        end,\n        size,\n        borderWidth: options.borderWidth\n    }, {\n        position: position.x,\n        padding: {\n            start: padding.left,\n            end: padding.right\n        },\n        adjust: options.label.xAdjust,\n        size: labelSize.width\n    });\n}\nfunction calculateY({ properties, options }, labelSize, position, padding) {\n    const { y: start, y2: end, height: size } = properties;\n    return calculatePosition({\n        start,\n        end,\n        size,\n        borderWidth: options.borderWidth\n    }, {\n        position: position.y,\n        padding: {\n            start: padding.top,\n            end: padding.bottom\n        },\n        adjust: options.label.yAdjust,\n        size: labelSize.height\n    });\n}\nfunction calculatePosition(boxOpts, labelOpts) {\n    const { start, end, borderWidth } = boxOpts;\n    const { position, padding: { start: padStart, end: padEnd }, adjust } = labelOpts;\n    const availableSize = end - borderWidth - start - padStart - padEnd - labelOpts.size;\n    return start + borderWidth / 2 + adjust + getRelativePosition(availableSize, position);\n}\nfunction resolveLabelElementProperties$1(chart, properties, options) {\n    const label = options.label;\n    label.backgroundColor = \"transparent\";\n    label.callout.display = false;\n    const position = toPosition(label.position);\n    const padding = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toPadding)(label.padding);\n    const labelSize = measureLabelSize(chart.ctx, label);\n    const x = calculateX({\n        properties,\n        options\n    }, labelSize, position, padding);\n    const y = calculateY({\n        properties,\n        options\n    }, labelSize, position, padding);\n    const width = labelSize.width + padding.width;\n    const height = labelSize.height + padding.height;\n    return {\n        x,\n        y,\n        x2: x + width,\n        y2: y + height,\n        width,\n        height,\n        centerX: x + width / 2,\n        centerY: y + height / 2,\n        rotation: label.rotation\n    };\n}\nconst moveHooks = [\n    \"enter\",\n    \"leave\"\n];\n/**\n * @typedef { import(\"chart.js\").Chart } Chart\n * @typedef { import('../../types/options').AnnotationPluginOptions } AnnotationPluginOptions\n */ const eventHooks = moveHooks.concat(\"click\");\n/**\n * @param {Chart} chart\n * @param {Object} state\n * @param {AnnotationPluginOptions} options\n */ function updateListeners(chart, state, options) {\n    state.listened = loadHooks(options, eventHooks, state.listeners);\n    state.moveListened = false;\n    moveHooks.forEach((hook)=>{\n        if ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isFunction)(options[hook])) {\n            state.moveListened = true;\n        }\n    });\n    if (!state.listened || !state.moveListened) {\n        state.annotations.forEach((scope)=>{\n            if (!state.listened && (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isFunction)(scope.click)) {\n                state.listened = true;\n            }\n            if (!state.moveListened) {\n                moveHooks.forEach((hook)=>{\n                    if ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isFunction)(scope[hook])) {\n                        state.listened = true;\n                        state.moveListened = true;\n                    }\n                });\n            }\n        });\n    }\n}\n/**\n * @param {Object} state\n * @param {ChartEvent} event\n * @param {AnnotationPluginOptions} options\n * @return {boolean|undefined}\n */ function handleEvent(state, event, options) {\n    if (state.listened) {\n        switch(event.type){\n            case \"mousemove\":\n            case \"mouseout\":\n                return handleMoveEvents(state, event, options);\n            case \"click\":\n                return handleClickEvents(state, event, options);\n        }\n    }\n}\nfunction handleMoveEvents(state, event, options) {\n    if (!state.moveListened) {\n        return;\n    }\n    let elements;\n    if (event.type === \"mousemove\") {\n        elements = getElements(state.visibleElements, event, options.interaction);\n    } else {\n        elements = [];\n    }\n    const previous = state.hovered;\n    state.hovered = elements;\n    const context = {\n        state,\n        event\n    };\n    let changed = dispatchMoveEvents(context, \"leave\", previous, elements);\n    return dispatchMoveEvents(context, \"enter\", elements, previous) || changed;\n}\nfunction dispatchMoveEvents({ state, event }, hook, elements, checkElements) {\n    let changed;\n    for (const element of elements){\n        if (checkElements.indexOf(element) < 0) {\n            changed = dispatchEvent(element.options[hook] || state.listeners[hook], element, event) || changed;\n        }\n    }\n    return changed;\n}\nfunction handleClickEvents(state, event, options) {\n    const listeners = state.listeners;\n    const elements = getElements(state.visibleElements, event, options.interaction);\n    let changed;\n    for (const element of elements){\n        changed = dispatchEvent(element.options.click || listeners.click, element, event) || changed;\n    }\n    return changed;\n}\nfunction dispatchEvent(handler, element, event) {\n    return (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.callback)(handler, [\n        element.$context,\n        event\n    ]) === true;\n}\n/**\n * @typedef { import(\"chart.js\").Chart } Chart\n * @typedef { import('../../types/options').AnnotationPluginOptions } AnnotationPluginOptions\n * @typedef { import('../../types/element').AnnotationElement } AnnotationElement\n */ const elementHooks = [\n    \"afterDraw\",\n    \"beforeDraw\"\n];\n/**\n * @param {Chart} chart\n * @param {Object} state\n * @param {AnnotationPluginOptions} options\n */ function updateHooks(chart, state, options) {\n    const visibleElements = state.visibleElements;\n    state.hooked = loadHooks(options, elementHooks, state.hooks);\n    if (!state.hooked) {\n        visibleElements.forEach((scope)=>{\n            if (!state.hooked) {\n                elementHooks.forEach((hook)=>{\n                    if ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isFunction)(scope.options[hook])) {\n                        state.hooked = true;\n                    }\n                });\n            }\n        });\n    }\n}\n/**\n * @param {Object} state\n * @param {AnnotationElement} element\n * @param {string} hook\n */ function invokeHook(state, element, hook) {\n    if (state.hooked) {\n        const callbackHook = element.options[hook] || state.hooks[hook];\n        return (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.callback)(callbackHook, [\n            element.$context\n        ]);\n    }\n}\n/**\n * @typedef { import(\"chart.js\").Chart } Chart\n * @typedef { import(\"chart.js\").Scale } Scale\n * @typedef { import('../../types/options').CoreAnnotationOptions } CoreAnnotationOptions\n */ /**\n * @param {Chart} chart\n * @param {Scale} scale\n * @param {CoreAnnotationOptions[]} annotations\n */ function adjustScaleRange(chart, scale, annotations) {\n    const range = getScaleLimits(chart.scales, scale, annotations);\n    let changed = changeScaleLimit(scale, range, \"min\", \"suggestedMin\");\n    changed = changeScaleLimit(scale, range, \"max\", \"suggestedMax\") || changed;\n    if (changed && (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isFunction)(scale.handleTickRangeOptions)) {\n        scale.handleTickRangeOptions();\n    }\n}\n/**\n * @param {CoreAnnotationOptions[]} annotations\n * @param {{ [key: string]: Scale }} scales\n */ function verifyScaleOptions(annotations, scales) {\n    for (const annotation of annotations){\n        verifyScaleIDs(annotation, scales);\n    }\n}\nfunction changeScaleLimit(scale, range, limit, suggestedLimit) {\n    if ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isFinite)(range[limit]) && !scaleLimitDefined(scale.options, limit, suggestedLimit)) {\n        const changed = scale[limit] !== range[limit];\n        scale[limit] = range[limit];\n        return changed;\n    }\n}\nfunction scaleLimitDefined(scaleOptions, limit, suggestedLimit) {\n    return (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.defined)(scaleOptions[limit]) || (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.defined)(scaleOptions[suggestedLimit]);\n}\nfunction verifyScaleIDs(annotation, scales) {\n    for (const key of [\n        \"scaleID\",\n        \"xScaleID\",\n        \"yScaleID\"\n    ]){\n        const scaleID = retrieveScaleID(scales, annotation, key);\n        if (scaleID && !scales[scaleID] && verifyProperties(annotation, key)) {\n            console.warn(`No scale found with id '${scaleID}' for annotation '${annotation.id}'`);\n        }\n    }\n}\nfunction verifyProperties(annotation, key) {\n    if (key === \"scaleID\") {\n        return true;\n    }\n    const axis = key.charAt(0);\n    for (const prop of [\n        \"Min\",\n        \"Max\",\n        \"Value\"\n    ]){\n        if ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.defined)(annotation[axis + prop])) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction getScaleLimits(scales, scale, annotations) {\n    const axis = scale.axis;\n    const scaleID = scale.id;\n    const scaleIDOption = axis + \"ScaleID\";\n    const limits = {\n        min: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.valueOrDefault)(scale.min, Number.NEGATIVE_INFINITY),\n        max: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.valueOrDefault)(scale.max, Number.POSITIVE_INFINITY)\n    };\n    for (const annotation of annotations){\n        if (annotation.scaleID === scaleID) {\n            updateLimits(annotation, scale, [\n                \"value\",\n                \"endValue\"\n            ], limits);\n        } else if (retrieveScaleID(scales, annotation, scaleIDOption) === scaleID) {\n            updateLimits(annotation, scale, [\n                axis + \"Min\",\n                axis + \"Max\",\n                axis + \"Value\"\n            ], limits);\n        }\n    }\n    return limits;\n}\nfunction updateLimits(annotation, scale, props, limits) {\n    for (const prop of props){\n        const raw = annotation[prop];\n        if ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.defined)(raw)) {\n            const value = scale.parse(raw);\n            limits.min = Math.min(limits.min, value);\n            limits.max = Math.max(limits.max, value);\n        }\n    }\n}\nclass BoxAnnotation extends chart_js__WEBPACK_IMPORTED_MODULE_1__.Element {\n    inRange(mouseX, mouseY, axis, useFinalPosition) {\n        const { x, y } = rotated({\n            x: mouseX,\n            y: mouseY\n        }, this.getCenterPoint(useFinalPosition), (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toRadians)(-this.options.rotation));\n        return inBoxRange({\n            x,\n            y\n        }, this.getProps([\n            \"x\",\n            \"y\",\n            \"x2\",\n            \"y2\"\n        ], useFinalPosition), axis, this.options);\n    }\n    getCenterPoint(useFinalPosition) {\n        return getElementCenterPoint(this, useFinalPosition);\n    }\n    draw(ctx) {\n        ctx.save();\n        translate(ctx, this.getCenterPoint(), this.options.rotation);\n        drawBox(ctx, this, this.options);\n        ctx.restore();\n    }\n    get label() {\n        return this.elements && this.elements[0];\n    }\n    resolveElementProperties(chart, options) {\n        return resolveBoxAndLabelProperties(chart, options);\n    }\n}\nBoxAnnotation.id = \"boxAnnotation\";\nBoxAnnotation.defaults = {\n    adjustScaleRange: true,\n    backgroundShadowColor: \"transparent\",\n    borderCapStyle: \"butt\",\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: \"miter\",\n    borderRadius: 0,\n    borderShadowColor: \"transparent\",\n    borderWidth: 1,\n    display: true,\n    init: undefined,\n    hitTolerance: 0,\n    label: {\n        backgroundColor: \"transparent\",\n        borderWidth: 0,\n        callout: {\n            display: false\n        },\n        color: \"black\",\n        content: null,\n        display: false,\n        drawTime: undefined,\n        font: {\n            family: undefined,\n            lineHeight: undefined,\n            size: undefined,\n            style: undefined,\n            weight: \"bold\"\n        },\n        height: undefined,\n        hitTolerance: undefined,\n        opacity: undefined,\n        padding: 6,\n        position: \"center\",\n        rotation: undefined,\n        textAlign: \"start\",\n        textStrokeColor: undefined,\n        textStrokeWidth: 0,\n        width: undefined,\n        xAdjust: 0,\n        yAdjust: 0,\n        z: undefined\n    },\n    rotation: 0,\n    shadowBlur: 0,\n    shadowOffsetX: 0,\n    shadowOffsetY: 0,\n    xMax: undefined,\n    xMin: undefined,\n    xScaleID: undefined,\n    yMax: undefined,\n    yMin: undefined,\n    yScaleID: undefined,\n    z: 0\n};\nBoxAnnotation.defaultRoutes = {\n    borderColor: \"color\",\n    backgroundColor: \"color\"\n};\nBoxAnnotation.descriptors = {\n    label: {\n        _fallback: true\n    }\n};\nclass DoughnutLabelAnnotation extends chart_js__WEBPACK_IMPORTED_MODULE_1__.Element {\n    inRange(mouseX, mouseY, axis, useFinalPosition) {\n        return inLabelRange({\n            x: mouseX,\n            y: mouseY\n        }, {\n            rect: this.getProps([\n                \"x\",\n                \"y\",\n                \"x2\",\n                \"y2\"\n            ], useFinalPosition),\n            center: this.getCenterPoint(useFinalPosition)\n        }, axis, {\n            rotation: this.rotation,\n            borderWidth: 0,\n            hitTolerance: this.options.hitTolerance\n        });\n    }\n    getCenterPoint(useFinalPosition) {\n        return getElementCenterPoint(this, useFinalPosition);\n    }\n    draw(ctx) {\n        const options = this.options;\n        if (!options.display || !options.content) {\n            return;\n        }\n        drawBackground(ctx, this);\n        ctx.save();\n        translate(ctx, this.getCenterPoint(), this.rotation);\n        drawLabel(ctx, this, options, this._fitRatio);\n        ctx.restore();\n    }\n    resolveElementProperties(chart, options) {\n        const meta = getDatasetMeta(chart, options);\n        if (!meta) {\n            return {};\n        }\n        const { controllerMeta, point, radius } = getControllerMeta(chart, options, meta);\n        let labelSize = measureLabelSize(chart.ctx, options);\n        const _fitRatio = getFitRatio(labelSize, radius);\n        if (shouldFit(options, _fitRatio)) {\n            labelSize = {\n                width: labelSize.width * _fitRatio,\n                height: labelSize.height * _fitRatio\n            };\n        }\n        const { position, xAdjust, yAdjust } = options;\n        const boxSize = measureLabelRectangle(point, labelSize, {\n            borderWidth: 0,\n            position,\n            xAdjust,\n            yAdjust\n        });\n        return {\n            initProperties: initAnimationProperties(chart, boxSize, options),\n            ...boxSize,\n            ...controllerMeta,\n            rotation: options.rotation,\n            _fitRatio\n        };\n    }\n}\nDoughnutLabelAnnotation.id = \"doughnutLabelAnnotation\";\nDoughnutLabelAnnotation.defaults = {\n    autoFit: true,\n    autoHide: true,\n    backgroundColor: \"transparent\",\n    backgroundShadowColor: \"transparent\",\n    borderColor: \"transparent\",\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: \"miter\",\n    borderShadowColor: \"transparent\",\n    borderWidth: 0,\n    color: \"black\",\n    content: null,\n    display: true,\n    font: {\n        family: undefined,\n        lineHeight: undefined,\n        size: undefined,\n        style: undefined,\n        weight: undefined\n    },\n    height: undefined,\n    hitTolerance: 0,\n    init: undefined,\n    opacity: undefined,\n    position: \"center\",\n    rotation: 0,\n    shadowBlur: 0,\n    shadowOffsetX: 0,\n    shadowOffsetY: 0,\n    spacing: 1,\n    textAlign: \"center\",\n    textStrokeColor: undefined,\n    textStrokeWidth: 0,\n    width: undefined,\n    xAdjust: 0,\n    yAdjust: 0\n};\nDoughnutLabelAnnotation.defaultRoutes = {};\nfunction getDatasetMeta(chart, options) {\n    return chart.getSortedVisibleDatasetMetas().reduce(function(result, value) {\n        const controller = value.controller;\n        if (controller instanceof chart_js__WEBPACK_IMPORTED_MODULE_1__.DoughnutController && isControllerVisible(chart, options, value.data) && (!result || controller.innerRadius < result.controller.innerRadius) && controller.options.circumference >= 90) {\n            return value;\n        }\n        return result;\n    }, undefined);\n}\nfunction isControllerVisible(chart, options, elements) {\n    if (!options.autoHide) {\n        return true;\n    }\n    for(let i = 0; i < elements.length; i++){\n        if (!elements[i].hidden && chart.getDataVisibility(i)) {\n            return true;\n        }\n    }\n}\nfunction getControllerMeta({ chartArea }, options, meta) {\n    const { left, top, right, bottom } = chartArea;\n    const { innerRadius, offsetX, offsetY } = meta.controller;\n    const x = (left + right) / 2 + offsetX;\n    const y = (top + bottom) / 2 + offsetY;\n    const square = {\n        left: Math.max(x - innerRadius, left),\n        right: Math.min(x + innerRadius, right),\n        top: Math.max(y - innerRadius, top),\n        bottom: Math.min(y + innerRadius, bottom)\n    };\n    const point = {\n        x: (square.left + square.right) / 2,\n        y: (square.top + square.bottom) / 2\n    };\n    const space = options.spacing + options.borderWidth / 2;\n    const _radius = innerRadius - space;\n    const _counterclockwise = point.y > y;\n    const side = _counterclockwise ? top + space : bottom - space;\n    const angles = getAngles(side, x, y, _radius);\n    const controllerMeta = {\n        _centerX: x,\n        _centerY: y,\n        _radius,\n        _counterclockwise,\n        ...angles\n    };\n    return {\n        controllerMeta,\n        point,\n        radius: Math.min(innerRadius, Math.min(square.right - square.left, square.bottom - square.top) / 2)\n    };\n}\nfunction getFitRatio({ width, height }, radius) {\n    const hypo = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n    return radius * 2 / hypo;\n}\nfunction getAngles(y, centerX, centerY, radius) {\n    const yk2 = Math.pow(centerY - y, 2);\n    const r2 = Math.pow(radius, 2);\n    const b = centerX * -2;\n    const c = Math.pow(centerX, 2) + yk2 - r2;\n    const delta = Math.pow(b, 2) - 4 * c;\n    if (delta <= 0) {\n        return {\n            _startAngle: 0,\n            _endAngle: chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.TAU\n        };\n    }\n    const start = (-b - Math.sqrt(delta)) / 2;\n    const end = (-b + Math.sqrt(delta)) / 2;\n    return {\n        _startAngle: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.getAngleFromPoint)({\n            x: centerX,\n            y: centerY\n        }, {\n            x: start,\n            y\n        }).angle,\n        _endAngle: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.getAngleFromPoint)({\n            x: centerX,\n            y: centerY\n        }, {\n            x: end,\n            y\n        }).angle\n    };\n}\nfunction drawBackground(ctx, element) {\n    const { _centerX, _centerY, _radius, _startAngle, _endAngle, _counterclockwise, options } = element;\n    ctx.save();\n    const stroke = setBorderStyle(ctx, options);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.beginPath();\n    ctx.arc(_centerX, _centerY, _radius, _startAngle, _endAngle, _counterclockwise);\n    ctx.closePath();\n    ctx.fill();\n    if (stroke) {\n        ctx.stroke();\n    }\n    ctx.restore();\n}\nclass LabelAnnotation extends chart_js__WEBPACK_IMPORTED_MODULE_1__.Element {\n    inRange(mouseX, mouseY, axis, useFinalPosition) {\n        return inLabelRange({\n            x: mouseX,\n            y: mouseY\n        }, {\n            rect: this.getProps([\n                \"x\",\n                \"y\",\n                \"x2\",\n                \"y2\"\n            ], useFinalPosition),\n            center: this.getCenterPoint(useFinalPosition)\n        }, axis, {\n            rotation: this.rotation,\n            borderWidth: this.options.borderWidth,\n            hitTolerance: this.options.hitTolerance\n        });\n    }\n    getCenterPoint(useFinalPosition) {\n        return getElementCenterPoint(this, useFinalPosition);\n    }\n    draw(ctx) {\n        const options = this.options;\n        const visible = !(0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.defined)(this._visible) || this._visible;\n        if (!options.display || !options.content || !visible) {\n            return;\n        }\n        ctx.save();\n        translate(ctx, this.getCenterPoint(), this.rotation);\n        drawCallout(ctx, this);\n        drawBox(ctx, this, options);\n        drawLabel(ctx, getLabelSize(this), options);\n        ctx.restore();\n    }\n    resolveElementProperties(chart, options) {\n        let point;\n        if (!isBoundToPoint(options)) {\n            const { centerX, centerY } = resolveBoxProperties(chart, options);\n            point = {\n                x: centerX,\n                y: centerY\n            };\n        } else {\n            point = getChartPoint(chart, options);\n        }\n        const padding = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toPadding)(options.padding);\n        const labelSize = measureLabelSize(chart.ctx, options);\n        const boxSize = measureLabelRectangle(point, labelSize, options, padding);\n        return {\n            initProperties: initAnimationProperties(chart, boxSize, options),\n            pointX: point.x,\n            pointY: point.y,\n            ...boxSize,\n            rotation: options.rotation\n        };\n    }\n}\nLabelAnnotation.id = \"labelAnnotation\";\nLabelAnnotation.defaults = {\n    adjustScaleRange: true,\n    backgroundColor: \"transparent\",\n    backgroundShadowColor: \"transparent\",\n    borderCapStyle: \"butt\",\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: \"miter\",\n    borderRadius: 0,\n    borderShadowColor: \"transparent\",\n    borderWidth: 0,\n    callout: {\n        borderCapStyle: \"butt\",\n        borderColor: undefined,\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: \"miter\",\n        borderWidth: 1,\n        display: false,\n        margin: 5,\n        position: \"auto\",\n        side: 5,\n        start: \"50%\"\n    },\n    color: \"black\",\n    content: null,\n    display: true,\n    font: {\n        family: undefined,\n        lineHeight: undefined,\n        size: undefined,\n        style: undefined,\n        weight: undefined\n    },\n    height: undefined,\n    hitTolerance: 0,\n    init: undefined,\n    opacity: undefined,\n    padding: 6,\n    position: \"center\",\n    rotation: 0,\n    shadowBlur: 0,\n    shadowOffsetX: 0,\n    shadowOffsetY: 0,\n    textAlign: \"center\",\n    textStrokeColor: undefined,\n    textStrokeWidth: 0,\n    width: undefined,\n    xAdjust: 0,\n    xMax: undefined,\n    xMin: undefined,\n    xScaleID: undefined,\n    xValue: undefined,\n    yAdjust: 0,\n    yMax: undefined,\n    yMin: undefined,\n    yScaleID: undefined,\n    yValue: undefined,\n    z: 0\n};\nLabelAnnotation.defaultRoutes = {\n    borderColor: \"color\"\n};\nfunction getLabelSize({ x, y, width, height, options }) {\n    const hBorderWidth = options.borderWidth / 2;\n    const padding = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toPadding)(options.padding);\n    return {\n        x: x + padding.left + hBorderWidth,\n        y: y + padding.top + hBorderWidth,\n        width: width - padding.left - padding.right - options.borderWidth,\n        height: height - padding.top - padding.bottom - options.borderWidth\n    };\n}\nconst pointInLine = (p1, p2, t)=>({\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    });\nconst interpolateX = (y, p1, p2)=>pointInLine(p1, p2, Math.abs((y - p1.y) / (p2.y - p1.y))).x;\nconst interpolateY = (x, p1, p2)=>pointInLine(p1, p2, Math.abs((x - p1.x) / (p2.x - p1.x))).y;\nconst sqr = (v)=>v * v;\nconst rangeLimit = (mouseX, mouseY, { x, y, x2, y2 }, axis)=>axis === \"y\" ? {\n        start: Math.min(y, y2),\n        end: Math.max(y, y2),\n        value: mouseY\n    } : {\n        start: Math.min(x, x2),\n        end: Math.max(x, x2),\n        value: mouseX\n    };\n// http://www.independent-software.com/determining-coordinates-on-a-html-canvas-bezier-curve.html\nconst coordInCurve = (start, cp, end, t)=>(1 - t) * (1 - t) * start + 2 * (1 - t) * t * cp + t * t * end;\nconst pointInCurve = (start, cp, end, t)=>({\n        x: coordInCurve(start.x, cp.x, end.x, t),\n        y: coordInCurve(start.y, cp.y, end.y, t)\n    });\nconst coordAngleInCurve = (start, cp, end, t)=>2 * (1 - t) * (cp - start) + 2 * t * (end - cp);\nconst angleInCurve = (start, cp, end, t)=>-Math.atan2(coordAngleInCurve(start.x, cp.x, end.x, t), coordAngleInCurve(start.y, cp.y, end.y, t)) + 0.5 * chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.PI;\nclass LineAnnotation extends chart_js__WEBPACK_IMPORTED_MODULE_1__.Element {\n    inRange(mouseX, mouseY, axis, useFinalPosition) {\n        const hitSize = (this.options.borderWidth + this.options.hitTolerance) / 2;\n        if (axis !== \"x\" && axis !== \"y\") {\n            const point = {\n                mouseX,\n                mouseY\n            };\n            const { path, ctx } = this;\n            if (path) {\n                setBorderStyle(ctx, this.options);\n                ctx.lineWidth += this.options.hitTolerance;\n                const { chart } = this.$context;\n                const mx = mouseX * chart.currentDevicePixelRatio;\n                const my = mouseY * chart.currentDevicePixelRatio;\n                const result = ctx.isPointInStroke(path, mx, my) || isOnLabel(this, point, useFinalPosition);\n                ctx.restore();\n                return result;\n            }\n            const epsilon = sqr(hitSize);\n            return intersects(this, point, epsilon, useFinalPosition) || isOnLabel(this, point, useFinalPosition);\n        }\n        return inAxisRange(this, {\n            mouseX,\n            mouseY\n        }, axis, {\n            hitSize,\n            useFinalPosition\n        });\n    }\n    getCenterPoint(useFinalPosition) {\n        return getElementCenterPoint(this, useFinalPosition);\n    }\n    draw(ctx) {\n        const { x, y, x2, y2, cp, options } = this;\n        ctx.save();\n        if (!setBorderStyle(ctx, options)) {\n            // no border width, then line is not drawn\n            return ctx.restore();\n        }\n        setShadowStyle(ctx, options);\n        const length = Math.sqrt(Math.pow(x2 - x, 2) + Math.pow(y2 - y, 2));\n        if (options.curve && cp) {\n            drawCurve(ctx, this, cp, length);\n            return ctx.restore();\n        }\n        const { startOpts, endOpts, startAdjust, endAdjust } = getArrowHeads(this);\n        const angle = Math.atan2(y2 - y, x2 - x);\n        ctx.translate(x, y);\n        ctx.rotate(angle);\n        ctx.beginPath();\n        ctx.moveTo(0 + startAdjust, 0);\n        ctx.lineTo(length - endAdjust, 0);\n        ctx.shadowColor = options.borderShadowColor;\n        ctx.stroke();\n        drawArrowHead(ctx, 0, startAdjust, startOpts);\n        drawArrowHead(ctx, length, -endAdjust, endOpts);\n        ctx.restore();\n    }\n    get label() {\n        return this.elements && this.elements[0];\n    }\n    resolveElementProperties(chart, options) {\n        const area = resolveLineProperties(chart, options);\n        const { x, y, x2, y2 } = area;\n        const inside = isLineInArea(area, chart.chartArea);\n        const properties = inside ? limitLineToArea({\n            x,\n            y\n        }, {\n            x: x2,\n            y: y2\n        }, chart.chartArea) : {\n            x,\n            y,\n            x2,\n            y2,\n            width: Math.abs(x2 - x),\n            height: Math.abs(y2 - y)\n        };\n        properties.centerX = (x2 + x) / 2;\n        properties.centerY = (y2 + y) / 2;\n        properties.initProperties = initAnimationProperties(chart, properties, options);\n        if (options.curve) {\n            const p1 = {\n                x: properties.x,\n                y: properties.y\n            };\n            const p2 = {\n                x: properties.x2,\n                y: properties.y2\n            };\n            properties.cp = getControlPoint(properties, options, (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.distanceBetweenPoints)(p1, p2));\n        }\n        const labelProperties = resolveLabelElementProperties(chart, properties, options.label);\n        // additonal prop to manage zoom/pan\n        labelProperties._visible = inside;\n        properties.elements = [\n            {\n                type: \"label\",\n                optionScope: \"label\",\n                properties: labelProperties,\n                initProperties: properties.initProperties\n            }\n        ];\n        return properties;\n    }\n}\nLineAnnotation.id = \"lineAnnotation\";\nconst arrowHeadsDefaults = {\n    backgroundColor: undefined,\n    backgroundShadowColor: undefined,\n    borderColor: undefined,\n    borderDash: undefined,\n    borderDashOffset: undefined,\n    borderShadowColor: undefined,\n    borderWidth: undefined,\n    display: undefined,\n    fill: undefined,\n    length: undefined,\n    shadowBlur: undefined,\n    shadowOffsetX: undefined,\n    shadowOffsetY: undefined,\n    width: undefined\n};\nLineAnnotation.defaults = {\n    adjustScaleRange: true,\n    arrowHeads: {\n        display: false,\n        end: Object.assign({}, arrowHeadsDefaults),\n        fill: false,\n        length: 12,\n        start: Object.assign({}, arrowHeadsDefaults),\n        width: 6\n    },\n    borderDash: [],\n    borderDashOffset: 0,\n    borderShadowColor: \"transparent\",\n    borderWidth: 2,\n    curve: false,\n    controlPoint: {\n        y: \"-50%\"\n    },\n    display: true,\n    endValue: undefined,\n    init: undefined,\n    hitTolerance: 0,\n    label: {\n        backgroundColor: \"rgba(0,0,0,0.8)\",\n        backgroundShadowColor: \"transparent\",\n        borderCapStyle: \"butt\",\n        borderColor: \"black\",\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: \"miter\",\n        borderRadius: 6,\n        borderShadowColor: \"transparent\",\n        borderWidth: 0,\n        callout: Object.assign({}, LabelAnnotation.defaults.callout),\n        color: \"#fff\",\n        content: null,\n        display: false,\n        drawTime: undefined,\n        font: {\n            family: undefined,\n            lineHeight: undefined,\n            size: undefined,\n            style: undefined,\n            weight: \"bold\"\n        },\n        height: undefined,\n        hitTolerance: undefined,\n        opacity: undefined,\n        padding: 6,\n        position: \"center\",\n        rotation: 0,\n        shadowBlur: 0,\n        shadowOffsetX: 0,\n        shadowOffsetY: 0,\n        textAlign: \"center\",\n        textStrokeColor: undefined,\n        textStrokeWidth: 0,\n        width: undefined,\n        xAdjust: 0,\n        yAdjust: 0,\n        z: undefined\n    },\n    scaleID: undefined,\n    shadowBlur: 0,\n    shadowOffsetX: 0,\n    shadowOffsetY: 0,\n    value: undefined,\n    xMax: undefined,\n    xMin: undefined,\n    xScaleID: undefined,\n    yMax: undefined,\n    yMin: undefined,\n    yScaleID: undefined,\n    z: 0\n};\nLineAnnotation.descriptors = {\n    arrowHeads: {\n        start: {\n            _fallback: true\n        },\n        end: {\n            _fallback: true\n        },\n        _fallback: true\n    }\n};\nLineAnnotation.defaultRoutes = {\n    borderColor: \"color\"\n};\nfunction inAxisRange(element, { mouseX, mouseY }, axis, { hitSize, useFinalPosition }) {\n    const limit = rangeLimit(mouseX, mouseY, element.getProps([\n        \"x\",\n        \"y\",\n        \"x2\",\n        \"y2\"\n    ], useFinalPosition), axis);\n    return inLimit(limit, hitSize) || isOnLabel(element, {\n        mouseX,\n        mouseY\n    }, useFinalPosition, axis);\n}\nfunction isLineInArea({ x, y, x2, y2 }, { top, right, bottom, left }) {\n    return !(x < left && x2 < left || x > right && x2 > right || y < top && y2 < top || y > bottom && y2 > bottom);\n}\nfunction limitPointToArea({ x, y }, p2, { top, right, bottom, left }) {\n    if (x < left) {\n        y = interpolateY(left, {\n            x,\n            y\n        }, p2);\n        x = left;\n    }\n    if (x > right) {\n        y = interpolateY(right, {\n            x,\n            y\n        }, p2);\n        x = right;\n    }\n    if (y < top) {\n        x = interpolateX(top, {\n            x,\n            y\n        }, p2);\n        y = top;\n    }\n    if (y > bottom) {\n        x = interpolateX(bottom, {\n            x,\n            y\n        }, p2);\n        y = bottom;\n    }\n    return {\n        x,\n        y\n    };\n}\nfunction limitLineToArea(p1, p2, area) {\n    const { x, y } = limitPointToArea(p1, p2, area);\n    const { x: x2, y: y2 } = limitPointToArea(p2, p1, area);\n    return {\n        x,\n        y,\n        x2,\n        y2,\n        width: Math.abs(x2 - x),\n        height: Math.abs(y2 - y)\n    };\n}\nfunction intersects(element, { mouseX, mouseY }, epsilon = EPSILON, useFinalPosition) {\n    // Adapted from https://stackoverflow.com/a/6853926/25507\n    const { x: x1, y: y1, x2, y2 } = element.getProps([\n        \"x\",\n        \"y\",\n        \"x2\",\n        \"y2\"\n    ], useFinalPosition);\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const lenSq = sqr(dx) + sqr(dy);\n    const t = lenSq === 0 ? -1 : ((mouseX - x1) * dx + (mouseY - y1) * dy) / lenSq;\n    let xx, yy;\n    if (t < 0) {\n        xx = x1;\n        yy = y1;\n    } else if (t > 1) {\n        xx = x2;\n        yy = y2;\n    } else {\n        xx = x1 + t * dx;\n        yy = y1 + t * dy;\n    }\n    return sqr(mouseX - xx) + sqr(mouseY - yy) <= epsilon;\n}\nfunction isOnLabel(element, { mouseX, mouseY }, useFinalPosition, axis) {\n    const label = element.label;\n    return label.options.display && label.inRange(mouseX, mouseY, axis, useFinalPosition);\n}\nfunction resolveLabelElementProperties(chart, properties, options) {\n    const borderWidth = options.borderWidth;\n    const padding = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toPadding)(options.padding);\n    const textSize = measureLabelSize(chart.ctx, options);\n    const width = textSize.width + padding.width + borderWidth;\n    const height = textSize.height + padding.height + borderWidth;\n    return calculateLabelPosition(properties, options, {\n        width,\n        height,\n        padding\n    }, chart.chartArea);\n}\nfunction calculateAutoRotation(properties) {\n    const { x, y, x2, y2 } = properties;\n    const rotation = Math.atan2(y2 - y, x2 - x);\n    // Flip the rotation if it goes > PI/2 or < -PI/2, so label stays upright\n    return rotation > chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.PI / 2 ? rotation - chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.PI : rotation < chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.PI / -2 ? rotation + chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.PI : rotation;\n}\nfunction calculateLabelPosition(properties, label, sizes, chartArea) {\n    const { width, height, padding } = sizes;\n    const { xAdjust, yAdjust } = label;\n    const p1 = {\n        x: properties.x,\n        y: properties.y\n    };\n    const p2 = {\n        x: properties.x2,\n        y: properties.y2\n    };\n    const rotation = label.rotation === \"auto\" ? calculateAutoRotation(properties) : (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toRadians)(label.rotation);\n    const size = rotatedSize(width, height, rotation);\n    const t = calculateT(properties, label, {\n        labelSize: size,\n        padding\n    }, chartArea);\n    const pt = properties.cp ? pointInCurve(p1, properties.cp, p2, t) : pointInLine(p1, p2, t);\n    const xCoordinateSizes = {\n        size: size.w,\n        min: chartArea.left,\n        max: chartArea.right,\n        padding: padding.left\n    };\n    const yCoordinateSizes = {\n        size: size.h,\n        min: chartArea.top,\n        max: chartArea.bottom,\n        padding: padding.top\n    };\n    const centerX = adjustLabelCoordinate(pt.x, xCoordinateSizes) + xAdjust;\n    const centerY = adjustLabelCoordinate(pt.y, yCoordinateSizes) + yAdjust;\n    return {\n        x: centerX - width / 2,\n        y: centerY - height / 2,\n        x2: centerX + width / 2,\n        y2: centerY + height / 2,\n        centerX,\n        centerY,\n        pointX: pt.x,\n        pointY: pt.y,\n        width,\n        height,\n        rotation: (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toDegrees)(rotation)\n    };\n}\nfunction rotatedSize(width, height, rotation) {\n    const cos = Math.cos(rotation);\n    const sin = Math.sin(rotation);\n    return {\n        w: Math.abs(width * cos) + Math.abs(height * sin),\n        h: Math.abs(width * sin) + Math.abs(height * cos)\n    };\n}\nfunction calculateT(properties, label, sizes, chartArea) {\n    let t;\n    const space = spaceAround(properties, chartArea);\n    if (label.position === \"start\") {\n        t = calculateTAdjust({\n            w: properties.x2 - properties.x,\n            h: properties.y2 - properties.y\n        }, sizes, label, space);\n    } else if (label.position === \"end\") {\n        t = 1 - calculateTAdjust({\n            w: properties.x - properties.x2,\n            h: properties.y - properties.y2\n        }, sizes, label, space);\n    } else {\n        t = getRelativePosition(1, label.position);\n    }\n    return t;\n}\nfunction calculateTAdjust(lineSize, sizes, label, space) {\n    const { labelSize, padding } = sizes;\n    const lineW = lineSize.w * space.dx;\n    const lineH = lineSize.h * space.dy;\n    const x = lineW > 0 && (labelSize.w / 2 + padding.left - space.x) / lineW;\n    const y = lineH > 0 && (labelSize.h / 2 + padding.top - space.y) / lineH;\n    return clamp(Math.max(x, y), 0, 0.25);\n}\nfunction spaceAround(properties, chartArea) {\n    const { x, x2, y, y2 } = properties;\n    const t = Math.min(y, y2) - chartArea.top;\n    const l = Math.min(x, x2) - chartArea.left;\n    const b = chartArea.bottom - Math.max(y, y2);\n    const r = chartArea.right - Math.max(x, x2);\n    return {\n        x: Math.min(l, r),\n        y: Math.min(t, b),\n        dx: l <= r ? 1 : -1,\n        dy: t <= b ? 1 : -1\n    };\n}\nfunction adjustLabelCoordinate(coordinate, labelSizes) {\n    const { size, min, max, padding } = labelSizes;\n    const halfSize = size / 2;\n    if (size > max - min) {\n        // if it does not fit, display as much as possible\n        return (max + min) / 2;\n    }\n    if (min >= coordinate - padding - halfSize) {\n        coordinate = min + padding + halfSize;\n    }\n    if (max <= coordinate + padding + halfSize) {\n        coordinate = max - padding - halfSize;\n    }\n    return coordinate;\n}\nfunction getArrowHeads(line) {\n    const options = line.options;\n    const arrowStartOpts = options.arrowHeads && options.arrowHeads.start;\n    const arrowEndOpts = options.arrowHeads && options.arrowHeads.end;\n    return {\n        startOpts: arrowStartOpts,\n        endOpts: arrowEndOpts,\n        startAdjust: getLineAdjust(line, arrowStartOpts),\n        endAdjust: getLineAdjust(line, arrowEndOpts)\n    };\n}\nfunction getLineAdjust(line, arrowOpts) {\n    if (!arrowOpts || !arrowOpts.display) {\n        return 0;\n    }\n    const { length, width } = arrowOpts;\n    const adjust = line.options.borderWidth / 2;\n    const p1 = {\n        x: length,\n        y: width + adjust\n    };\n    const p2 = {\n        x: 0,\n        y: adjust\n    };\n    return Math.abs(interpolateX(0, p1, p2));\n}\nfunction drawArrowHead(ctx, offset, adjust, arrowOpts) {\n    if (!arrowOpts || !arrowOpts.display) {\n        return;\n    }\n    const { length, width, fill, backgroundColor, borderColor } = arrowOpts;\n    const arrowOffsetX = Math.abs(offset - length) + adjust;\n    ctx.beginPath();\n    setShadowStyle(ctx, arrowOpts);\n    setBorderStyle(ctx, arrowOpts);\n    ctx.moveTo(arrowOffsetX, -width);\n    ctx.lineTo(offset + adjust, 0);\n    ctx.lineTo(arrowOffsetX, width);\n    if (fill === true) {\n        ctx.fillStyle = backgroundColor || borderColor;\n        ctx.closePath();\n        ctx.fill();\n        ctx.shadowColor = \"transparent\";\n    } else {\n        ctx.shadowColor = arrowOpts.borderShadowColor;\n    }\n    ctx.stroke();\n}\nfunction getControlPoint(properties, options, distance) {\n    const { x, y, x2, y2, centerX, centerY } = properties;\n    const angle = Math.atan2(y2 - y, x2 - x);\n    const cp = toPosition(options.controlPoint, 0);\n    const point = {\n        x: centerX + getSize(distance, cp.x, false),\n        y: centerY + getSize(distance, cp.y, false)\n    };\n    return rotated(point, {\n        x: centerX,\n        y: centerY\n    }, angle);\n}\nfunction drawArrowHeadOnCurve(ctx, { x, y }, { angle, adjust }, arrowOpts) {\n    if (!arrowOpts || !arrowOpts.display) {\n        return;\n    }\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate(angle);\n    drawArrowHead(ctx, 0, -adjust, arrowOpts);\n    ctx.restore();\n}\nfunction drawCurve(ctx, element, cp, length) {\n    const { x, y, x2, y2, options } = element;\n    const { startOpts, endOpts, startAdjust, endAdjust } = getArrowHeads(element);\n    const p1 = {\n        x,\n        y\n    };\n    const p2 = {\n        x: x2,\n        y: y2\n    };\n    const startAngle = angleInCurve(p1, cp, p2, 0);\n    const endAngle = angleInCurve(p1, cp, p2, 1) - chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.PI;\n    const ps = pointInCurve(p1, cp, p2, startAdjust / length);\n    const pe = pointInCurve(p1, cp, p2, 1 - endAdjust / length);\n    const path = new Path2D();\n    ctx.beginPath();\n    path.moveTo(ps.x, ps.y);\n    path.quadraticCurveTo(cp.x, cp.y, pe.x, pe.y);\n    ctx.shadowColor = options.borderShadowColor;\n    ctx.stroke(path);\n    element.path = path;\n    element.ctx = ctx;\n    drawArrowHeadOnCurve(ctx, ps, {\n        angle: startAngle,\n        adjust: startAdjust\n    }, startOpts);\n    drawArrowHeadOnCurve(ctx, pe, {\n        angle: endAngle,\n        adjust: endAdjust\n    }, endOpts);\n}\nclass EllipseAnnotation extends chart_js__WEBPACK_IMPORTED_MODULE_1__.Element {\n    inRange(mouseX, mouseY, axis, useFinalPosition) {\n        const rotation = this.options.rotation;\n        const hitSize = (this.options.borderWidth + this.options.hitTolerance) / 2;\n        if (axis !== \"x\" && axis !== \"y\") {\n            return pointInEllipse({\n                x: mouseX,\n                y: mouseY\n            }, this.getProps([\n                \"width\",\n                \"height\",\n                \"centerX\",\n                \"centerY\"\n            ], useFinalPosition), rotation, hitSize);\n        }\n        const { x, y, x2, y2 } = this.getProps([\n            \"x\",\n            \"y\",\n            \"x2\",\n            \"y2\"\n        ], useFinalPosition);\n        const limit = axis === \"y\" ? {\n            start: y,\n            end: y2\n        } : {\n            start: x,\n            end: x2\n        };\n        const rotatedPoint = rotated({\n            x: mouseX,\n            y: mouseY\n        }, this.getCenterPoint(useFinalPosition), (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toRadians)(-rotation));\n        return rotatedPoint[axis] >= limit.start - hitSize - EPSILON && rotatedPoint[axis] <= limit.end + hitSize + EPSILON;\n    }\n    getCenterPoint(useFinalPosition) {\n        return getElementCenterPoint(this, useFinalPosition);\n    }\n    draw(ctx) {\n        const { width, height, centerX, centerY, options } = this;\n        ctx.save();\n        translate(ctx, this.getCenterPoint(), options.rotation);\n        setShadowStyle(ctx, this.options);\n        ctx.beginPath();\n        ctx.fillStyle = options.backgroundColor;\n        const stroke = setBorderStyle(ctx, options);\n        ctx.ellipse(centerX, centerY, height / 2, width / 2, chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.PI / 2, 0, 2 * chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.PI);\n        ctx.fill();\n        if (stroke) {\n            ctx.shadowColor = options.borderShadowColor;\n            ctx.stroke();\n        }\n        ctx.restore();\n    }\n    get label() {\n        return this.elements && this.elements[0];\n    }\n    resolveElementProperties(chart, options) {\n        return resolveBoxAndLabelProperties(chart, options);\n    }\n}\nEllipseAnnotation.id = \"ellipseAnnotation\";\nEllipseAnnotation.defaults = {\n    adjustScaleRange: true,\n    backgroundShadowColor: \"transparent\",\n    borderDash: [],\n    borderDashOffset: 0,\n    borderShadowColor: \"transparent\",\n    borderWidth: 1,\n    display: true,\n    hitTolerance: 0,\n    init: undefined,\n    label: Object.assign({}, BoxAnnotation.defaults.label),\n    rotation: 0,\n    shadowBlur: 0,\n    shadowOffsetX: 0,\n    shadowOffsetY: 0,\n    xMax: undefined,\n    xMin: undefined,\n    xScaleID: undefined,\n    yMax: undefined,\n    yMin: undefined,\n    yScaleID: undefined,\n    z: 0\n};\nEllipseAnnotation.defaultRoutes = {\n    borderColor: \"color\",\n    backgroundColor: \"color\"\n};\nEllipseAnnotation.descriptors = {\n    label: {\n        _fallback: true\n    }\n};\nfunction pointInEllipse(p, ellipse, rotation, hitSize) {\n    const { width, height, centerX, centerY } = ellipse;\n    const xRadius = width / 2;\n    const yRadius = height / 2;\n    if (xRadius <= 0 || yRadius <= 0) {\n        return false;\n    }\n    // https://stackoverflow.com/questions/7946187/point-and-ellipse-rotated-position-test-algorithm\n    const angle = (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toRadians)(rotation || 0);\n    const cosAngle = Math.cos(angle);\n    const sinAngle = Math.sin(angle);\n    const a = Math.pow(cosAngle * (p.x - centerX) + sinAngle * (p.y - centerY), 2);\n    const b = Math.pow(sinAngle * (p.x - centerX) - cosAngle * (p.y - centerY), 2);\n    return a / Math.pow(xRadius + hitSize, 2) + b / Math.pow(yRadius + hitSize, 2) <= 1.0001;\n}\nclass PointAnnotation extends chart_js__WEBPACK_IMPORTED_MODULE_1__.Element {\n    inRange(mouseX, mouseY, axis, useFinalPosition) {\n        const { x, y, x2, y2, width } = this.getProps([\n            \"x\",\n            \"y\",\n            \"x2\",\n            \"y2\",\n            \"width\"\n        ], useFinalPosition);\n        const hitSize = (this.options.borderWidth + this.options.hitTolerance) / 2;\n        if (axis !== \"x\" && axis !== \"y\") {\n            return inPointRange({\n                x: mouseX,\n                y: mouseY\n            }, this.getCenterPoint(useFinalPosition), width / 2, hitSize);\n        }\n        const limit = axis === \"y\" ? {\n            start: y,\n            end: y2,\n            value: mouseY\n        } : {\n            start: x,\n            end: x2,\n            value: mouseX\n        };\n        return inLimit(limit, hitSize);\n    }\n    getCenterPoint(useFinalPosition) {\n        return getElementCenterPoint(this, useFinalPosition);\n    }\n    draw(ctx) {\n        const options = this.options;\n        const borderWidth = options.borderWidth;\n        if (options.radius < 0.1) {\n            return;\n        }\n        ctx.save();\n        ctx.fillStyle = options.backgroundColor;\n        setShadowStyle(ctx, options);\n        const stroke = setBorderStyle(ctx, options);\n        drawPoint(ctx, this, this.centerX, this.centerY);\n        if (stroke && !isImageOrCanvas(options.pointStyle)) {\n            ctx.shadowColor = options.borderShadowColor;\n            ctx.stroke();\n        }\n        ctx.restore();\n        options.borderWidth = borderWidth;\n    }\n    resolveElementProperties(chart, options) {\n        const properties = resolvePointProperties(chart, options);\n        properties.initProperties = initAnimationProperties(chart, properties, options);\n        return properties;\n    }\n}\nPointAnnotation.id = \"pointAnnotation\";\nPointAnnotation.defaults = {\n    adjustScaleRange: true,\n    backgroundShadowColor: \"transparent\",\n    borderDash: [],\n    borderDashOffset: 0,\n    borderShadowColor: \"transparent\",\n    borderWidth: 1,\n    display: true,\n    hitTolerance: 0,\n    init: undefined,\n    pointStyle: \"circle\",\n    radius: 10,\n    rotation: 0,\n    shadowBlur: 0,\n    shadowOffsetX: 0,\n    shadowOffsetY: 0,\n    xAdjust: 0,\n    xMax: undefined,\n    xMin: undefined,\n    xScaleID: undefined,\n    xValue: undefined,\n    yAdjust: 0,\n    yMax: undefined,\n    yMin: undefined,\n    yScaleID: undefined,\n    yValue: undefined,\n    z: 0\n};\nPointAnnotation.defaultRoutes = {\n    borderColor: \"color\",\n    backgroundColor: \"color\"\n};\nclass PolygonAnnotation extends chart_js__WEBPACK_IMPORTED_MODULE_1__.Element {\n    inRange(mouseX, mouseY, axis, useFinalPosition) {\n        if (axis !== \"x\" && axis !== \"y\") {\n            return this.options.radius >= 0.1 && this.elements.length > 1 && pointIsInPolygon(this.elements, mouseX, mouseY, useFinalPosition);\n        }\n        const rotatedPoint = rotated({\n            x: mouseX,\n            y: mouseY\n        }, this.getCenterPoint(useFinalPosition), (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.toRadians)(-this.options.rotation));\n        const axisPoints = this.elements.map((point)=>axis === \"y\" ? point.bY : point.bX);\n        const start = Math.min(...axisPoints);\n        const end = Math.max(...axisPoints);\n        return rotatedPoint[axis] >= start && rotatedPoint[axis] <= end;\n    }\n    getCenterPoint(useFinalPosition) {\n        return getElementCenterPoint(this, useFinalPosition);\n    }\n    draw(ctx) {\n        const { elements, options } = this;\n        ctx.save();\n        ctx.beginPath();\n        ctx.fillStyle = options.backgroundColor;\n        setShadowStyle(ctx, options);\n        const stroke = setBorderStyle(ctx, options);\n        let first = true;\n        for (const el of elements){\n            if (first) {\n                ctx.moveTo(el.x, el.y);\n                first = false;\n            } else {\n                ctx.lineTo(el.x, el.y);\n            }\n        }\n        ctx.closePath();\n        ctx.fill();\n        // If no border, don't draw it\n        if (stroke) {\n            ctx.shadowColor = options.borderShadowColor;\n            ctx.stroke();\n        }\n        ctx.restore();\n    }\n    resolveElementProperties(chart, options) {\n        const properties = resolvePointProperties(chart, options);\n        const { sides, rotation } = options;\n        const elements = [];\n        const angle = 2 * chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.PI / sides;\n        let rad = rotation * chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.RAD_PER_DEG;\n        for(let i = 0; i < sides; i++, rad += angle){\n            const elProps = buildPointElement(properties, options, rad);\n            elProps.initProperties = initAnimationProperties(chart, properties, options);\n            elements.push(elProps);\n        }\n        properties.elements = elements;\n        return properties;\n    }\n}\nPolygonAnnotation.id = \"polygonAnnotation\";\nPolygonAnnotation.defaults = {\n    adjustScaleRange: true,\n    backgroundShadowColor: \"transparent\",\n    borderCapStyle: \"butt\",\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: \"miter\",\n    borderShadowColor: \"transparent\",\n    borderWidth: 1,\n    display: true,\n    hitTolerance: 0,\n    init: undefined,\n    point: {\n        radius: 0\n    },\n    radius: 10,\n    rotation: 0,\n    shadowBlur: 0,\n    shadowOffsetX: 0,\n    shadowOffsetY: 0,\n    sides: 3,\n    xAdjust: 0,\n    xMax: undefined,\n    xMin: undefined,\n    xScaleID: undefined,\n    xValue: undefined,\n    yAdjust: 0,\n    yMax: undefined,\n    yMin: undefined,\n    yScaleID: undefined,\n    yValue: undefined,\n    z: 0\n};\nPolygonAnnotation.defaultRoutes = {\n    borderColor: \"color\",\n    backgroundColor: \"color\"\n};\nfunction buildPointElement({ centerX, centerY }, { radius, borderWidth, hitTolerance }, rad) {\n    const hitSize = (borderWidth + hitTolerance) / 2;\n    const sin = Math.sin(rad);\n    const cos = Math.cos(rad);\n    const point = {\n        x: centerX + sin * radius,\n        y: centerY - cos * radius\n    };\n    return {\n        type: \"point\",\n        optionScope: \"point\",\n        properties: {\n            x: point.x,\n            y: point.y,\n            centerX: point.x,\n            centerY: point.y,\n            bX: centerX + sin * (radius + hitSize),\n            bY: centerY - cos * (radius + hitSize)\n        }\n    };\n}\nfunction pointIsInPolygon(points, x, y, useFinalPosition) {\n    let isInside = false;\n    let A = points[points.length - 1].getProps([\n        \"bX\",\n        \"bY\"\n    ], useFinalPosition);\n    for (const point of points){\n        const B = point.getProps([\n            \"bX\",\n            \"bY\"\n        ], useFinalPosition);\n        if (B.bY > y !== A.bY > y && x < (A.bX - B.bX) * (y - B.bY) / (A.bY - B.bY) + B.bX) {\n            isInside = !isInside;\n        }\n        A = B;\n    }\n    return isInside;\n}\nconst annotationTypes = {\n    box: BoxAnnotation,\n    doughnutLabel: DoughnutLabelAnnotation,\n    ellipse: EllipseAnnotation,\n    label: LabelAnnotation,\n    line: LineAnnotation,\n    point: PointAnnotation,\n    polygon: PolygonAnnotation\n};\n/**\n * Register fallback for annotation elements\n * For example lineAnnotation options would be looked through:\n * - the annotation object (options.plugins.annotation.annotations[id])\n * - element options (options.elements.lineAnnotation)\n * - element defaults (defaults.elements.lineAnnotation)\n * - annotation plugin defaults (defaults.plugins.annotation, this is what we are registering here)\n */ Object.keys(annotationTypes).forEach((key)=>{\n    chart_js__WEBPACK_IMPORTED_MODULE_2__.d.describe(`elements.${annotationTypes[key].id}`, {\n        _fallback: \"plugins.annotation.common\"\n    });\n});\nconst directUpdater = {\n    update: Object.assign\n};\nconst hooks$1 = eventHooks.concat(elementHooks);\nconst resolve = (value, optDefs)=>(0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isObject)(optDefs) ? resolveObj(value, optDefs) : value;\n/**\n * @typedef { import(\"chart.js\").Chart } Chart\n * @typedef { import(\"chart.js\").UpdateMode } UpdateMode\n * @typedef { import('../../types/options').AnnotationPluginOptions } AnnotationPluginOptions\n */ /**\n * @param {string} prop\n * @returns {boolean}\n */ const isIndexable = (prop)=>prop === \"color\" || prop === \"font\";\n/**\n * Resolve the annotation type, checking if is supported.\n * @param {string} [type=line] - annotation type\n * @returns {string} resolved annotation type\n */ function resolveType(type = \"line\") {\n    if (annotationTypes[type]) {\n        return type;\n    }\n    console.warn(`Unknown annotation type: '${type}', defaulting to 'line'`);\n    return \"line\";\n}\n/**\n * @param {Chart} chart\n * @param {Object} state\n * @param {AnnotationPluginOptions} options\n * @param {UpdateMode} mode\n */ function updateElements(chart, state, options, mode) {\n    const animations = resolveAnimations(chart, options.animations, mode);\n    const annotations = state.annotations;\n    const elements = resyncElements(state.elements, annotations);\n    for(let i = 0; i < annotations.length; i++){\n        const annotationOptions = annotations[i];\n        const element = getOrCreateElement(elements, i, annotationOptions.type);\n        const resolver = annotationOptions.setContext(getContext(chart, element, elements, annotationOptions));\n        const properties = element.resolveElementProperties(chart, resolver);\n        properties.skip = toSkip(properties);\n        if (\"elements\" in properties) {\n            updateSubElements(element, properties.elements, resolver, animations);\n            // Remove the sub-element definitions from properties, so the actual elements\n            // are not overwritten by their definitions\n            delete properties.elements;\n        }\n        if (!(0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.defined)(element.x)) {\n            // If the element is newly created, assing the properties directly - to\n            // make them readily awailable to any scriptable options. If we do not do this,\n            // the properties retruned by `resolveElementProperties` are available only\n            // after options resolution.\n            Object.assign(element, properties);\n        }\n        Object.assign(element, properties.initProperties);\n        properties.options = resolveAnnotationOptions(resolver);\n        animations.update(element, properties);\n    }\n}\nfunction toSkip(properties) {\n    return isNaN(properties.x) || isNaN(properties.y);\n}\nfunction resolveAnimations(chart, animOpts, mode) {\n    if (mode === \"reset\" || mode === \"none\" || mode === \"resize\") {\n        return directUpdater;\n    }\n    return new chart_js__WEBPACK_IMPORTED_MODULE_1__.Animations(chart, animOpts);\n}\nfunction updateSubElements(mainElement, elements, resolver, animations) {\n    const subElements = mainElement.elements || (mainElement.elements = []);\n    subElements.length = elements.length;\n    for(let i = 0; i < elements.length; i++){\n        const definition = elements[i];\n        const properties = definition.properties;\n        const subElement = getOrCreateElement(subElements, i, definition.type, definition.initProperties);\n        const subResolver = resolver[definition.optionScope].override(definition);\n        properties.options = resolveAnnotationOptions(subResolver);\n        animations.update(subElement, properties);\n    }\n}\nfunction getOrCreateElement(elements, index, type, initProperties) {\n    const elementClass = annotationTypes[resolveType(type)];\n    let element = elements[index];\n    if (!element || !(element instanceof elementClass)) {\n        element = elements[index] = new elementClass();\n        Object.assign(element, initProperties);\n    }\n    return element;\n}\nfunction resolveAnnotationOptions(resolver) {\n    const elementClass = annotationTypes[resolveType(resolver.type)];\n    const result = {};\n    result.id = resolver.id;\n    result.type = resolver.type;\n    result.drawTime = resolver.drawTime;\n    Object.assign(result, resolveObj(resolver, elementClass.defaults), resolveObj(resolver, elementClass.defaultRoutes));\n    for (const hook of hooks$1){\n        result[hook] = resolver[hook];\n    }\n    return result;\n}\nfunction resolveObj(resolver, defs) {\n    const result = {};\n    for (const prop of Object.keys(defs)){\n        const optDefs = defs[prop];\n        const value = resolver[prop];\n        if (isIndexable(prop) && (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isArray)(value)) {\n            result[prop] = value.map((item)=>resolve(item, optDefs));\n        } else {\n            result[prop] = resolve(value, optDefs);\n        }\n    }\n    return result;\n}\nfunction getContext(chart, element, elements, annotation) {\n    return element.$context || (element.$context = Object.assign(Object.create(chart.getContext()), {\n        element,\n        get elements () {\n            return elements.filter((el)=>el && el.options);\n        },\n        id: annotation.id,\n        type: \"annotation\"\n    }));\n}\nfunction resyncElements(elements, annotations) {\n    const count = annotations.length;\n    const start = elements.length;\n    if (start < count) {\n        const add = count - start;\n        elements.splice(start, 0, ...new Array(add));\n    } else if (start > count) {\n        elements.splice(count, start - count);\n    }\n    return elements;\n}\nvar version = \"3.1.0\";\nconst chartStates = new Map();\nconst isNotDoughnutLabel = (annotation)=>annotation.type !== \"doughnutLabel\";\nconst hooks = eventHooks.concat(elementHooks);\nvar annotation = {\n    id: \"annotation\",\n    version,\n    beforeRegister () {\n        requireVersion(\"chart.js\", \"4.0\", chart_js__WEBPACK_IMPORTED_MODULE_1__.Chart.version);\n    },\n    afterRegister () {\n        chart_js__WEBPACK_IMPORTED_MODULE_1__.Chart.register(annotationTypes);\n    },\n    afterUnregister () {\n        chart_js__WEBPACK_IMPORTED_MODULE_1__.Chart.unregister(annotationTypes);\n    },\n    beforeInit (chart) {\n        chartStates.set(chart, {\n            annotations: [],\n            elements: [],\n            visibleElements: [],\n            listeners: {},\n            listened: false,\n            moveListened: false,\n            hooks: {},\n            hooked: false,\n            hovered: []\n        });\n    },\n    beforeUpdate (chart, args, options) {\n        const state = chartStates.get(chart);\n        const annotations = state.annotations = [];\n        let annotationOptions = options.annotations;\n        if ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isObject)(annotationOptions)) {\n            Object.keys(annotationOptions).forEach((key)=>{\n                const value = annotationOptions[key];\n                if ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) {\n                    value.id = key;\n                    annotations.push(value);\n                }\n            });\n        } else if ((0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.isArray)(annotationOptions)) {\n            annotations.push(...annotationOptions);\n        }\n        verifyScaleOptions(annotations.filter(isNotDoughnutLabel), chart.scales);\n    },\n    afterDataLimits (chart, args) {\n        const state = chartStates.get(chart);\n        adjustScaleRange(chart, args.scale, state.annotations.filter(isNotDoughnutLabel).filter((a)=>a.display && a.adjustScaleRange));\n    },\n    afterUpdate (chart, args, options) {\n        const state = chartStates.get(chart);\n        updateListeners(chart, state, options);\n        updateElements(chart, state, options, args.mode);\n        state.visibleElements = state.elements.filter((el)=>!el.skip && el.options.display);\n        updateHooks(chart, state, options);\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        draw(chart, \"beforeDatasetsDraw\", options.clip);\n    },\n    afterDatasetsDraw (chart, _args, options) {\n        draw(chart, \"afterDatasetsDraw\", options.clip);\n    },\n    beforeDatasetDraw (chart, _args, options) {\n        draw(chart, _args.index, options.clip);\n    },\n    beforeDraw (chart, _args, options) {\n        draw(chart, \"beforeDraw\", options.clip);\n    },\n    afterDraw (chart, _args, options) {\n        draw(chart, \"afterDraw\", options.clip);\n    },\n    beforeEvent (chart, args, options) {\n        const state = chartStates.get(chart);\n        if (handleEvent(state, args.event, options)) {\n            args.changed = true;\n        }\n    },\n    afterDestroy (chart) {\n        chartStates.delete(chart);\n    },\n    getAnnotations (chart) {\n        const state = chartStates.get(chart);\n        return state ? state.elements : [];\n    },\n    // only for testing\n    _getAnnotationElementsAtEventForMode (visibleElements, event, options) {\n        return getElements(visibleElements, event, options);\n    },\n    defaults: {\n        animations: {\n            numbers: {\n                properties: [\n                    \"x\",\n                    \"y\",\n                    \"x2\",\n                    \"y2\",\n                    \"width\",\n                    \"height\",\n                    \"centerX\",\n                    \"centerY\",\n                    \"pointX\",\n                    \"pointY\",\n                    \"radius\"\n                ],\n                type: \"number\"\n            },\n            colors: {\n                properties: [\n                    \"backgroundColor\",\n                    \"borderColor\"\n                ],\n                type: \"color\"\n            }\n        },\n        clip: true,\n        interaction: {\n            mode: undefined,\n            axis: undefined,\n            intersect: undefined\n        },\n        common: {\n            drawTime: \"afterDatasetsDraw\",\n            init: false,\n            label: {}\n        }\n    },\n    descriptors: {\n        _indexable: false,\n        _scriptable: (prop)=>!hooks.includes(prop) && prop !== \"init\",\n        annotations: {\n            _allKeys: false,\n            _fallback: (prop, opts)=>`elements.${annotationTypes[resolveType(opts.type)].id}`\n        },\n        interaction: {\n            _fallback: true\n        },\n        common: {\n            label: {\n                _indexable: isIndexable,\n                _fallback: true\n            },\n            _indexable: isIndexable\n        }\n    },\n    additionalOptionScopes: [\n        \"\"\n    ]\n};\nfunction draw(chart, caller, clip) {\n    const { ctx, chartArea } = chart;\n    const state = chartStates.get(chart);\n    if (clip) {\n        (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.clipArea)(ctx, chartArea);\n    }\n    const drawableElements = getDrawableElements(state.visibleElements, caller).sort((a, b)=>a.element.options.z - b.element.options.z);\n    for (const item of drawableElements){\n        drawElement(ctx, chartArea, state, item);\n    }\n    if (clip) {\n        (0,chart_js_helpers__WEBPACK_IMPORTED_MODULE_0__.unclipArea)(ctx);\n    }\n}\nfunction getDrawableElements(elements, caller) {\n    const drawableElements = [];\n    for (const el of elements){\n        if (el.options.drawTime === caller) {\n            drawableElements.push({\n                element: el,\n                main: true\n            });\n        }\n        if (el.elements && el.elements.length) {\n            for (const sub of el.elements){\n                if (sub.options.display && sub.options.drawTime === caller) {\n                    drawableElements.push({\n                        element: sub\n                    });\n                }\n            }\n        }\n    }\n    return drawableElements;\n}\nfunction drawElement(ctx, chartArea, state, item) {\n    const el = item.element;\n    if (item.main) {\n        invokeHook(state, el, \"beforeDraw\");\n        el.draw(ctx, chartArea);\n        invokeHook(state, el, \"afterDraw\");\n    } else {\n        el.draw(ctx, chartArea);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chartjs-plugin-annotation/dist/chartjs-plugin-annotation.esm.js\n");

/***/ })

};
;